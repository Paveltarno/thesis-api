{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"advanced/","text":"Advanced Topics Best practices and Convenient methods Examples may show higher level of complexity. In this section we present best practices to implement the necessary code matching the phrase text. This section also offers some utility methods that you can use in your code. We encourage you to use these methods to create a shorter code with better readability. These method wraps generic operations and include the boilercode to perform these operations. Size Use the python len() function to return how many items are in the list. Example If I have exactly one meeting on Friday send a message to mom saying that I will be free. event_category = EventCategory . resolve_from_text ( \"meeting\" ) date_time = DateTime . resolve_from_text ( \"on Friday\" ) events = Event . find_events ( event_category = event_category , date_time = date_time ) expr = len ( events ) == 1 if expr : recipient = Contact . resolve_from_text ( \"mom\" ) content = Content . resolve_from_text ( \"I will be free\" ) Message . send_message ( recipient = recipient , content = content ) Oftentimes, we will use the len() function to verify a certain condition expression is true. Example If I didn't get any message from Louie yesterday text him to call me. sender = Contact . resolve_from_text ( \"Louie\" ) date_time = DateTime . resolve_from_text ( \"yesterday\" ) messages = Message . find_messages ( sender = sender , date_time = date_time ) expr = len ( messages ) == 0 if expr : recipient = sender content = Content . resolve_from_text ( \"call me\" ) Message . send_message ( recipient = recipient , content = content ) First / last N elements We provide a convenient method to return the first (or last) N elements (defaults to 1 if not specified). Prefer using this method over Pyton slicing, if you are familiar with it. utils . first ( items : List [ Entity ], n : int ): List [ Entity ] Parameters: items: `List[Entity]` A list of items. n: `int` Number of items to fetch in the list. Example Delete the last 2 messages from Henry. sender = Contact . reolve_from_text ( \"Henry\" ) messages = Message . get_message ( sender = sender ) messages = last ( messages , 2 ) Message . delete_messages ( messages = messages ) All Return whether every element is True or equivalent (e.g. non-zero or non-empty). Returns False in case there is at least one element within a series or along a Dataframe axis that is True or equivalent. utils . all ( items : List [ Entity ], ** kwargs ) Parameters: items: `List[Entity]` A list to perform the test on. **kwargs: Arguments list according to the action API `find_` function arguments. Example Will it rain every day this weekend? # find the weather forecasts for every day this weekend date_time = DateTime . resolve_from_text ( \"this weekend\" ) weather_forecasts = Weather . find_weather_forecasts ( date_time = date_time ) # arguments to test for all items in the list weather_attr = WeatherAttribute . resolve_from_text ( \"rain\" ) utils . all ( weather_forecasts , weather_attr = weather_attr ) sort Sort by a specific type. Get directions to the closest pharmacy. location = Location . resolve_from_text ( \"pharmacy\" ) navigation_directions = Navigation . find_directions ( location = location ) modifier = Modifier . resolve_from_text () navigation_directions = utils . sort ( navigation_directions , \"closest pharmacy\" ) Responder . respond ( response = navigation_directions ) Note In this example we sort the directions routes by \"closest pharmacy\" as these are sorted by default by time and not distance. most Return True whether the majority of items in a list are matching a given criteria. utils . most ( items : List [ Entity ], ** kwargs ): List [ Entity ] Parameters: items: `List[Entity]` A list of items. **kwargs: Arguments list according to the action API `find_` function arguments. Example Is it going to be mostly rainy over this weekend? weather_attribute = WeatherAttribute . reolve_from_text ( \"rainy\" ) date_time = DateTime . resolve_from_text ( \"this weekend\" ) weather_forecasts = Weather . find_weather_forecasts ( date_time = date_time ) result = utils . most ( weather_forecasts , weather_attribute = weather_attribute ) Responder . respond ( response = result ) filter Some user requests will require additional filtering on the actions results. This method subsets the data according to specified data types resolved from the text. utils . filter ( items : List [ Entity ], ** kwargs ): List [ Entity ] Parameters: items: `List[Entity]` A list of items. **kwargs: Arguments list according to the action API `find_` function arguments. Example Route to my office, and if the road is icy then text John to expect traffic. destination = Location . resolve_from_text ( \"my office\" ) navigation_directions = Navigation . find_directions ( destination = destination ) Responder . respond ( response = navigation_directions ) nav_road_conditions = NavigationRoadConditions . resolve_from_text ( \"icy\" ) navigation_directions2 = utils . filter ( navigation_directions , nav_road_conditions = nav_road_conditions ) expr = len ( navigation_directions2 ) > 0 if expr : recipient = Contact . resolve_from_text ( \"John\" ) content = Content . resolve_from_text ( \"expect traffic\" ) Message . send_message ( recipient = recipient , content = content ) We first query for directions to a specific destination (\"the office\") and show it to the user. Then, we need to filter the results for any matches to the requested criteria (in this example: road conditions are \"icy\"). map This method applies a function returns a value to every item of a list according to a textual description. The map function is usually used to extract values on a fetched list of items. utils . map ( items : List [ Entity ], text : str ): List [ Entity ] Parameters: items: `List[Entity]` A list of items. text: `str` Text value to map the list items according to. Example Email all attendees on the 9am meeting that I am running late. date_time = DateTime . resolve_from_text ( \"9am\" ) events = Event . find_events ( date_time = date_time ) recipients = utils . map ( events , \"all attendees\" ) for recipient in recipients : content = Content . resolve_from_text ( \"I am running late\" ) Message . send_message ( recipient = recipient , content = content ) Exceptions and errors Sometimes users make requests that cannot be fulfilled, like when requesting for a non existant date (Feb 30th) or when one of the requests should not produce any results (\"Delete all emails from Gavin\" where Gavin never sent an email). When writing code, you can assume no failures should happen due to the user provided inputs and call the APIs without worrying for any exceptions. The system deals with such failures and operates a recovery mechanism. The recovery mechanism tries to recover from all these exceptions by describing the problem to the user and prompting a corrected input or dismissal of the user utterance. This is out of scope of this work and you should not bother youself with details about it","title":"Advanced topics"},{"location":"advanced/#advanced-topics","text":"","title":"Advanced Topics"},{"location":"advanced/#best-practices-and-convenient-methods","text":"Examples may show higher level of complexity. In this section we present best practices to implement the necessary code matching the phrase text. This section also offers some utility methods that you can use in your code. We encourage you to use these methods to create a shorter code with better readability. These method wraps generic operations and include the boilercode to perform these operations.","title":"Best practices and Convenient methods"},{"location":"advanced/#size","text":"Use the python len() function to return how many items are in the list. Example If I have exactly one meeting on Friday send a message to mom saying that I will be free. event_category = EventCategory . resolve_from_text ( \"meeting\" ) date_time = DateTime . resolve_from_text ( \"on Friday\" ) events = Event . find_events ( event_category = event_category , date_time = date_time ) expr = len ( events ) == 1 if expr : recipient = Contact . resolve_from_text ( \"mom\" ) content = Content . resolve_from_text ( \"I will be free\" ) Message . send_message ( recipient = recipient , content = content ) Oftentimes, we will use the len() function to verify a certain condition expression is true. Example If I didn't get any message from Louie yesterday text him to call me. sender = Contact . resolve_from_text ( \"Louie\" ) date_time = DateTime . resolve_from_text ( \"yesterday\" ) messages = Message . find_messages ( sender = sender , date_time = date_time ) expr = len ( messages ) == 0 if expr : recipient = sender content = Content . resolve_from_text ( \"call me\" ) Message . send_message ( recipient = recipient , content = content )","title":"Size"},{"location":"advanced/#first-last-n-elements","text":"We provide a convenient method to return the first (or last) N elements (defaults to 1 if not specified). Prefer using this method over Pyton slicing, if you are familiar with it. utils . first ( items : List [ Entity ], n : int ): List [ Entity ] Parameters: items: `List[Entity]` A list of items. n: `int` Number of items to fetch in the list. Example Delete the last 2 messages from Henry. sender = Contact . reolve_from_text ( \"Henry\" ) messages = Message . get_message ( sender = sender ) messages = last ( messages , 2 ) Message . delete_messages ( messages = messages )","title":"First / last N elements"},{"location":"advanced/#all","text":"Return whether every element is True or equivalent (e.g. non-zero or non-empty). Returns False in case there is at least one element within a series or along a Dataframe axis that is True or equivalent. utils . all ( items : List [ Entity ], ** kwargs ) Parameters: items: `List[Entity]` A list to perform the test on. **kwargs: Arguments list according to the action API `find_` function arguments. Example Will it rain every day this weekend? # find the weather forecasts for every day this weekend date_time = DateTime . resolve_from_text ( \"this weekend\" ) weather_forecasts = Weather . find_weather_forecasts ( date_time = date_time ) # arguments to test for all items in the list weather_attr = WeatherAttribute . resolve_from_text ( \"rain\" ) utils . all ( weather_forecasts , weather_attr = weather_attr )","title":"All"},{"location":"advanced/#sort","text":"Sort by a specific type. Get directions to the closest pharmacy. location = Location . resolve_from_text ( \"pharmacy\" ) navigation_directions = Navigation . find_directions ( location = location ) modifier = Modifier . resolve_from_text () navigation_directions = utils . sort ( navigation_directions , \"closest pharmacy\" ) Responder . respond ( response = navigation_directions ) Note In this example we sort the directions routes by \"closest pharmacy\" as these are sorted by default by time and not distance.","title":"sort"},{"location":"advanced/#most","text":"Return True whether the majority of items in a list are matching a given criteria. utils . most ( items : List [ Entity ], ** kwargs ): List [ Entity ] Parameters: items: `List[Entity]` A list of items. **kwargs: Arguments list according to the action API `find_` function arguments. Example Is it going to be mostly rainy over this weekend? weather_attribute = WeatherAttribute . reolve_from_text ( \"rainy\" ) date_time = DateTime . resolve_from_text ( \"this weekend\" ) weather_forecasts = Weather . find_weather_forecasts ( date_time = date_time ) result = utils . most ( weather_forecasts , weather_attribute = weather_attribute ) Responder . respond ( response = result )","title":"most"},{"location":"advanced/#filter","text":"Some user requests will require additional filtering on the actions results. This method subsets the data according to specified data types resolved from the text. utils . filter ( items : List [ Entity ], ** kwargs ): List [ Entity ] Parameters: items: `List[Entity]` A list of items. **kwargs: Arguments list according to the action API `find_` function arguments. Example Route to my office, and if the road is icy then text John to expect traffic. destination = Location . resolve_from_text ( \"my office\" ) navigation_directions = Navigation . find_directions ( destination = destination ) Responder . respond ( response = navigation_directions ) nav_road_conditions = NavigationRoadConditions . resolve_from_text ( \"icy\" ) navigation_directions2 = utils . filter ( navigation_directions , nav_road_conditions = nav_road_conditions ) expr = len ( navigation_directions2 ) > 0 if expr : recipient = Contact . resolve_from_text ( \"John\" ) content = Content . resolve_from_text ( \"expect traffic\" ) Message . send_message ( recipient = recipient , content = content ) We first query for directions to a specific destination (\"the office\") and show it to the user. Then, we need to filter the results for any matches to the requested criteria (in this example: road conditions are \"icy\").","title":"filter"},{"location":"advanced/#map","text":"This method applies a function returns a value to every item of a list according to a textual description. The map function is usually used to extract values on a fetched list of items. utils . map ( items : List [ Entity ], text : str ): List [ Entity ] Parameters: items: `List[Entity]` A list of items. text: `str` Text value to map the list items according to. Example Email all attendees on the 9am meeting that I am running late. date_time = DateTime . resolve_from_text ( \"9am\" ) events = Event . find_events ( date_time = date_time ) recipients = utils . map ( events , \"all attendees\" ) for recipient in recipients : content = Content . resolve_from_text ( \"I am running late\" ) Message . send_message ( recipient = recipient , content = content )","title":"map"},{"location":"advanced/#exceptions-and-errors","text":"Sometimes users make requests that cannot be fulfilled, like when requesting for a non existant date (Feb 30th) or when one of the requests should not produce any results (\"Delete all emails from Gavin\" where Gavin never sent an email). When writing code, you can assume no failures should happen due to the user provided inputs and call the APIs without worrying for any exceptions. The system deals with such failures and operates a recovery mechanism. The recovery mechanism tries to recover from all these exceptions by describing the problem to the user and prompting a corrected input or dismissal of the user utterance. This is out of scope of this work and you should not bother youself with details about it","title":"Exceptions and errors"},{"location":"exercises/","text":"Exercises Follow the quick Get Started tutorial and the conding convention we present there and try writing a code for given user (complex) commands challenges. Exercise 1 Try to write code for the following user command. This time, we will provide a solution to this exercise. What will the weather be in two hours, and remind me to go running then. Solution date_time = DateTime . resolveFromText ( \"in two hours\" ) weather_forecast = WeatherQuery . find_weather_forecasts ( date_time = date_time ) response = weather_forecast Responder . respond ( response = response ) content = Content . resolve_from_text ( \"go running\" ) contact = Contact . resolve_from_text ( \"me\" ) person_reminded = contact create_reminder ( content = content , person_reminded = person_reminded , date_time = date_time ) Exercise 2 Try to write code for the following user command: If there's a concert in the park next month, remind me next week to check for discounted tickets. Exercise 3 Write code for the following user command: Read me my new emails in my mailbox and archive them once they are read. Exercise 4 I need you to give me directions to a place where I can rent the cheapest tux in town, and then directions from there to the wedding reception event I have scheduled. product = Product . resolve_from_text ( \"tux\" ) location = Location . resolve_from_text ( \"in town\" ) stores = Commerce . find_stores ( product = product , location = location ) stores = utils . filter ( stores , \"cheapest\" ) destinations = Location . resolve_from_entity ( stores ) response = [] for destination in destinations : navigation_directions = Navigation . find_directions ( destination = destination ) response . append ( navigation_directions ) Responder . respond ( response = response )","title":"Exercises"},{"location":"exercises/#exercises","text":"Follow the quick Get Started tutorial and the conding convention we present there and try writing a code for given user (complex) commands challenges.","title":"Exercises"},{"location":"exercises/#exercise-1","text":"Try to write code for the following user command. This time, we will provide a solution to this exercise. What will the weather be in two hours, and remind me to go running then. Solution date_time = DateTime . resolveFromText ( \"in two hours\" ) weather_forecast = WeatherQuery . find_weather_forecasts ( date_time = date_time ) response = weather_forecast Responder . respond ( response = response ) content = Content . resolve_from_text ( \"go running\" ) contact = Contact . resolve_from_text ( \"me\" ) person_reminded = contact create_reminder ( content = content , person_reminded = person_reminded , date_time = date_time )","title":"Exercise 1"},{"location":"exercises/#exercise-2","text":"Try to write code for the following user command: If there's a concert in the park next month, remind me next week to check for discounted tickets.","title":"Exercise 2"},{"location":"exercises/#exercise-3","text":"Write code for the following user command: Read me my new emails in my mailbox and archive them once they are read.","title":"Exercise 3"},{"location":"exercises/#exercise-4","text":"I need you to give me directions to a place where I can rent the cheapest tux in town, and then directions from there to the wedding reception event I have scheduled. product = Product . resolve_from_text ( \"tux\" ) location = Location . resolve_from_text ( \"in town\" ) stores = Commerce . find_stores ( product = product , location = location ) stores = utils . filter ( stores , \"cheapest\" ) destinations = Location . resolve_from_entity ( stores ) response = [] for destination in destinations : navigation_directions = Navigation . find_directions ( destination = destination ) response . append ( navigation_directions ) Responder . respond ( response = response )","title":"Exercise 4"},{"location":"get_started/","text":"Getting started Let's learn by example. Throughout this tutorial, we\u2019ll walk you through the creation of a basic Python code for given virtual agent user commands. We collected user commands for a virtual assistance (like Siri or Alexa). The virtual assistant offers help in navigation, weather forecasts, messaging, reminders, shopping and more. The goal of this project is to match user commands in English to a valid Python code. We\u2019ll assume you have a basic experience with Python already. Simple commands Simple commands express a single action that the virtual assistant is expected to perform. Simple command example Let's start by writing a code for a simple user command: Get directions from Disneyland to my house. To match this user command we need to map it with the Navigation.find_directions(origin: Optional[Location], destination: Location) function in the Navigation API. origin = Location . resolve_from_text ( \"Disneyland\" ) destination = Location . resolve_from_text ( \"my house\" ) navigation_directions = Navigation . find_directions ( origin = origin , destination = destination ) Responder . respond ( response = navigation_directions ) Navigation.find_directions is taking an origin Location and a destination Location as its parameters. We first create the origin Location object. We name it according to the argument name origin . A text is usually mapped to a variable using the resolve_from_text() function. Likewise, we then create the destination Location object and name it with the argument name destination . Next, we plug the origin and destination parameters into the Navigation.find_directions function call. This function will return a list of navigation directions. Last, we report back the result to the user using the Responder.respond(response: Entity|Iterable[Entity]) API. As the response we set the navigation_directions result from the previous step. Another simple command example Another simple user command: Text Karen that I will be late. To match this user command we need to map it with the Messages.send_message(recipient: Contact, content: Content) API in the Messaging API. recipient = Contact . resolve_from_text ( \"Karen\" ) content = Content . resolve_from_text ( \"I will be late\" ) Messages . send_message ( recipient = recipient , content = content ) We first create the Contact object and name it according to the argument name recipient . Similarly, we create the Content object and name it content . Next, we plug the recipient and content parameters into the Messages.send_message function call to call the function with its arguments. Complex commands Complex commands can express multiple simple commands together like in sequences or conditions. Alterntaively, complex can call a simple commands multiple times like in loops. Let's see some examples for complex commands. Complex command example Complex user command: Get directions from Disneyland to my house and text them to Robert. We already went over the first part of the command (\"Get directions from Disneyland to my house\"). origin = Location . resolve_from_text ( \"Disneyland\" ) detination = Location . resolve_from_text ( \"my house\" ) navigation_directions = Navigation . find_directions ( origin = origin , destination = destination ) Let's see the other part and put the code together. To match \"text them to Robert\" user command we need to map it with the Messages.send_message API. recipient = Contact . resolve_from_text ( \"Robert\" ) content = Content . resolve_from_entity ( navigation_directions ) Messages . send_message ( recipient = recipient , content = content ) We create the Contact object and name it recipient . Now we need to create the Content object. Notice that in this example, the content of the message in this example is the navigation directions list we got on the previous step. Therefore, we use the utility function Content.resolve_from_entity() to cast the navigation_direction entity to a Content entity. Last, we call the Messages.send_message function with its arguments. The final code should look like this: origin = Location . resolve_from_text ( \"Disneyland\" ) detination = Location . resolve_from_text ( \"my house\" ) navigation_direction = Navigation . find_directions ( origin = origin , destination = destination ) recipient = Location . resolve_from_text ( \"Robert\" ) content = Content . resolve_from_entity ( navigation_direction ) Messages . send_message ( recipient = recipient , content = content ) Another complex command example Let's see another complex user command: Remind me to bring an umbrella if it rains tomorrow. The first part of the command: \"Remind me to bring an umbrella\" is conditioned by the second part of the sentence \"if it rains tomorrow\". Conditions are another building blocks of complex commands. First, we get the weather forecasts by using the Weather.find_weather_forecasts(date_time: Optional[DateTime], weather_attribute: Optional[WeatherAttribute]) in the Weather API. date_time = DateTime . resolve_from_text ( \"tomorrow\" ) weather_attribute = WeatherAttribute . resolve_from_text ( \"rains\" ) weather_forecasts = Weather . find_weather_forecasts ( date_time = date_time , weather_attribute = weather_attribute ) Note This API takes additional optional arguments, like a location, which we did not include in this example. In that case, the API assumes default values for the unspecified arguments (like the current location). Don't bother yourself with it and use only what is specified in the example. Then, we check for the truthness of the condition expression. It will be valid if the Weather.find_weather_forecasts returned any result. This function return a list of weather forecases that match the DateTime and WeatherAttribute . expr = len ( list ( weather_forecasts )) > 0 if expr : The condition body should include the \"Remind me to bring an umbrella\" command. person_reminded = Contact . resolve_from_text ( \"me\" ) content = Content . resolve_from_text ( \"Bring an umbrella\" ) . Reminder . create_reminder ( person_reminded = person_reminded , content = content ) We follow the Reminder.create_reminder(person_reminded: Optional[Contact], content: Content) API spec. Note Notice that in the content object we omit the word \"to\" and keep the content that should appear in the reminder (\"bring an umbrella\"). Putting everything together: date_time = DateTime . resolve_from_text ( \"tomorrow\" ) weather_attribute = WeatherAttribute . resolve_from_text ( \"rains\" ) weather_forecasts = Weather . find_weather_forecasts ( date_time = date_time , weather_attribute = weather_attribute ) expr = len ( weather_forecasts ) > 0 if expr : person_reminded = Contact . resolve_from_text ( \"me\" ) content = Content . resolve_from_text ( \"Bring an umbrella\" ) Reminder . create_reminder ( person_reminded = person_reminded , content = content ) Yet another complex command example Let's see one more complex user command: What is the weather in Paris and London? We will execute this command in a loop iterating over \"Paris\" and \"London\", althought it can be executed it in a sequence like previous commands. Weather forecasts are returned in the Weather.find_weather_forecasts(location: Optional[Location]) We are required to report back to the user every result. This is done using Responder.respond(response: Entity | List[Entity]) . Since we are looping, we collect all responses in the response list and pass it to the Responder.respond() function. location1 = Location . resolve_from_text ( \"Paris\" ) location2 = Location . resolve_from_text ( \"London\" ) response = [] for location in [ location1 , location2 ]: weather_forecasts = Weather . find_weather_forecasts ( location = location ) response . append ( weather_forecasts ) Responder . respond ( response = response ) Last complex command example We'll finish this part of the tutorial with one last complex user command: Show me the traffic to each Whole Food branch in a 10 miles radius. Traffic information is acquired using the Navigation.find_traffic_info(destination: Optional[Location]) API in the Navigation API. destinations = Location . resolve_from_text ( \"each Whole Food branch in a 10 miles radius\" ) response = [] for detination in destinations : traffic_info = Navigation . find_traffic_info ( destination = destination ) response . append ( weather_forecasts )) Responder . respond ( response = response ) While in previous examples we saw specific location names (e.g. Disneyland, my house), in this example we are looking at a group of locations. The function Location.resolve_from_text is aware if it should return a single Location object or a list of Location objects (like in this case) according to the text argument it is called with. We get a list of Location using Location.resolve_from_text . The full text describing the location should be provided to it: each Whole Food branch in a 10 miles radius . Next, we loop over the list of Location from the previous step and find the Navigation traffic information using the Navigation.find_traffic_info() . We append each traffic info result to a response list and when the loop finishes we call the Responder.respose() with this list.","title":"Getting started"},{"location":"get_started/#getting-started","text":"Let's learn by example. Throughout this tutorial, we\u2019ll walk you through the creation of a basic Python code for given virtual agent user commands. We collected user commands for a virtual assistance (like Siri or Alexa). The virtual assistant offers help in navigation, weather forecasts, messaging, reminders, shopping and more. The goal of this project is to match user commands in English to a valid Python code. We\u2019ll assume you have a basic experience with Python already.","title":"Getting started"},{"location":"get_started/#simple-commands","text":"Simple commands express a single action that the virtual assistant is expected to perform.","title":"Simple commands"},{"location":"get_started/#simple-command-example","text":"Let's start by writing a code for a simple user command: Get directions from Disneyland to my house. To match this user command we need to map it with the Navigation.find_directions(origin: Optional[Location], destination: Location) function in the Navigation API. origin = Location . resolve_from_text ( \"Disneyland\" ) destination = Location . resolve_from_text ( \"my house\" ) navigation_directions = Navigation . find_directions ( origin = origin , destination = destination ) Responder . respond ( response = navigation_directions ) Navigation.find_directions is taking an origin Location and a destination Location as its parameters. We first create the origin Location object. We name it according to the argument name origin . A text is usually mapped to a variable using the resolve_from_text() function. Likewise, we then create the destination Location object and name it with the argument name destination . Next, we plug the origin and destination parameters into the Navigation.find_directions function call. This function will return a list of navigation directions. Last, we report back the result to the user using the Responder.respond(response: Entity|Iterable[Entity]) API. As the response we set the navigation_directions result from the previous step.","title":"Simple command example"},{"location":"get_started/#another-simple-command-example","text":"Another simple user command: Text Karen that I will be late. To match this user command we need to map it with the Messages.send_message(recipient: Contact, content: Content) API in the Messaging API. recipient = Contact . resolve_from_text ( \"Karen\" ) content = Content . resolve_from_text ( \"I will be late\" ) Messages . send_message ( recipient = recipient , content = content ) We first create the Contact object and name it according to the argument name recipient . Similarly, we create the Content object and name it content . Next, we plug the recipient and content parameters into the Messages.send_message function call to call the function with its arguments.","title":"Another simple command example"},{"location":"get_started/#complex-commands","text":"Complex commands can express multiple simple commands together like in sequences or conditions. Alterntaively, complex can call a simple commands multiple times like in loops. Let's see some examples for complex commands.","title":"Complex commands"},{"location":"get_started/#complex-command-example","text":"Complex user command: Get directions from Disneyland to my house and text them to Robert. We already went over the first part of the command (\"Get directions from Disneyland to my house\"). origin = Location . resolve_from_text ( \"Disneyland\" ) detination = Location . resolve_from_text ( \"my house\" ) navigation_directions = Navigation . find_directions ( origin = origin , destination = destination ) Let's see the other part and put the code together. To match \"text them to Robert\" user command we need to map it with the Messages.send_message API. recipient = Contact . resolve_from_text ( \"Robert\" ) content = Content . resolve_from_entity ( navigation_directions ) Messages . send_message ( recipient = recipient , content = content ) We create the Contact object and name it recipient . Now we need to create the Content object. Notice that in this example, the content of the message in this example is the navigation directions list we got on the previous step. Therefore, we use the utility function Content.resolve_from_entity() to cast the navigation_direction entity to a Content entity. Last, we call the Messages.send_message function with its arguments. The final code should look like this: origin = Location . resolve_from_text ( \"Disneyland\" ) detination = Location . resolve_from_text ( \"my house\" ) navigation_direction = Navigation . find_directions ( origin = origin , destination = destination ) recipient = Location . resolve_from_text ( \"Robert\" ) content = Content . resolve_from_entity ( navigation_direction ) Messages . send_message ( recipient = recipient , content = content )","title":"Complex command example"},{"location":"get_started/#another-complex-command-example","text":"Let's see another complex user command: Remind me to bring an umbrella if it rains tomorrow. The first part of the command: \"Remind me to bring an umbrella\" is conditioned by the second part of the sentence \"if it rains tomorrow\". Conditions are another building blocks of complex commands. First, we get the weather forecasts by using the Weather.find_weather_forecasts(date_time: Optional[DateTime], weather_attribute: Optional[WeatherAttribute]) in the Weather API. date_time = DateTime . resolve_from_text ( \"tomorrow\" ) weather_attribute = WeatherAttribute . resolve_from_text ( \"rains\" ) weather_forecasts = Weather . find_weather_forecasts ( date_time = date_time , weather_attribute = weather_attribute ) Note This API takes additional optional arguments, like a location, which we did not include in this example. In that case, the API assumes default values for the unspecified arguments (like the current location). Don't bother yourself with it and use only what is specified in the example. Then, we check for the truthness of the condition expression. It will be valid if the Weather.find_weather_forecasts returned any result. This function return a list of weather forecases that match the DateTime and WeatherAttribute . expr = len ( list ( weather_forecasts )) > 0 if expr : The condition body should include the \"Remind me to bring an umbrella\" command. person_reminded = Contact . resolve_from_text ( \"me\" ) content = Content . resolve_from_text ( \"Bring an umbrella\" ) . Reminder . create_reminder ( person_reminded = person_reminded , content = content ) We follow the Reminder.create_reminder(person_reminded: Optional[Contact], content: Content) API spec. Note Notice that in the content object we omit the word \"to\" and keep the content that should appear in the reminder (\"bring an umbrella\"). Putting everything together: date_time = DateTime . resolve_from_text ( \"tomorrow\" ) weather_attribute = WeatherAttribute . resolve_from_text ( \"rains\" ) weather_forecasts = Weather . find_weather_forecasts ( date_time = date_time , weather_attribute = weather_attribute ) expr = len ( weather_forecasts ) > 0 if expr : person_reminded = Contact . resolve_from_text ( \"me\" ) content = Content . resolve_from_text ( \"Bring an umbrella\" ) Reminder . create_reminder ( person_reminded = person_reminded , content = content )","title":"Another complex command example"},{"location":"get_started/#yet-another-complex-command-example","text":"Let's see one more complex user command: What is the weather in Paris and London? We will execute this command in a loop iterating over \"Paris\" and \"London\", althought it can be executed it in a sequence like previous commands. Weather forecasts are returned in the Weather.find_weather_forecasts(location: Optional[Location]) We are required to report back to the user every result. This is done using Responder.respond(response: Entity | List[Entity]) . Since we are looping, we collect all responses in the response list and pass it to the Responder.respond() function. location1 = Location . resolve_from_text ( \"Paris\" ) location2 = Location . resolve_from_text ( \"London\" ) response = [] for location in [ location1 , location2 ]: weather_forecasts = Weather . find_weather_forecasts ( location = location ) response . append ( weather_forecasts ) Responder . respond ( response = response )","title":"Yet another complex command example"},{"location":"get_started/#last-complex-command-example","text":"We'll finish this part of the tutorial with one last complex user command: Show me the traffic to each Whole Food branch in a 10 miles radius. Traffic information is acquired using the Navigation.find_traffic_info(destination: Optional[Location]) API in the Navigation API. destinations = Location . resolve_from_text ( \"each Whole Food branch in a 10 miles radius\" ) response = [] for detination in destinations : traffic_info = Navigation . find_traffic_info ( destination = destination ) response . append ( weather_forecasts )) Responder . respond ( response = response ) While in previous examples we saw specific location names (e.g. Disneyland, my house), in this example we are looking at a group of locations. The function Location.resolve_from_text is aware if it should return a single Location object or a list of Location objects (like in this case) according to the text argument it is called with. We get a list of Location using Location.resolve_from_text . The full text describing the location should be provided to it: each Whole Food branch in a 10 miles radius . Next, we loop over the list of Location from the previous step and find the Navigation traffic information using the Navigation.find_traffic_info() . We append each traffic info result to a response list and when the loop finishes we call the Responder.respose() with this list.","title":"Last complex command example"},{"location":"reference/","text":"API Reference Actions The API supports the following actions: Event Message Navigation Reminder Reponder Weather Data types Data types support the resolution of information from the user requests to be used in the API actions. The following datat types are available: Content DateTime EventCalendar EventCategory EventName Location MessageContentType MessageStatus NavRoadCondition NavTravelMethod Contact WeatherAttribute WeatherTemperatureUnit","title":"API Reference"},{"location":"reference/#api-reference","text":"","title":"API Reference"},{"location":"reference/#actions","text":"The API supports the following actions: Event Message Navigation Reminder Reponder Weather","title":"Actions"},{"location":"reference/#data-types","text":"Data types support the resolution of information from the user requests to be used in the API actions. The following datat types are available: Content DateTime EventCalendar EventCategory EventName Location MessageContentType MessageStatus NavRoadCondition NavTravelMethod Contact WeatherAttribute WeatherTemperatureUnit","title":"Data types"},{"location":"reference/actions/event/","text":"Event Events can be public or private. Public events are for example a concert in the park or a game, where there is a general knowledge about the event and its details. A private event can appear as an entry in the user calendar and include information about the event in a calendar app. Event.find This API provides us with events information. Event . find ( date_time : Optional [ DateTime ], location : Optional [ Location ], event_name : Optional [ EventName ], event_calendar : Optional [ EventCalendar ], resource : Optional [ Resurce ] ) : Iterable [ EventEntity ] Arguments Name Type Optional Description date_time DateTime Yes Date and time of the event location Location Yes Event location event_category EventCategory Yes The event name event_name EventName Yes The event name event_calendar EventCalendar Yes The calendar name where the event should be listed resource Resource Yes The event resource application Returns Type Description Iterable[EventEntity] Iterable of EventEntity objects Example When is the Eagles concert with Chris Stapleton coming to Dallas? event_name = EventName . resolve_from_text ( \"Eagles concert with Chris Stapleton\" ) event_category = EventCategory . resolve_from_text ( \"concert\" ) location = Location . resolve_from_text ( \"Dallas\" ) events = Event . find ( event_name = event_name , event_category = event_category , location = location ) response = events Responder . respond ( response = response ) Example Show me my next meeting on my work calendar. event_category = EventCategory . resolve_from_text ( \"meeting\" ) event_calendar = EventCalendar . resolve_from_text ( \"my work calendar\" ) events = Event . find ( event_category = event_category , event_calendar = event_calendar ) events = events . first () response = events Responder . respond ( response = response )","title":"Event"},{"location":"reference/actions/event/#event","text":"Events can be public or private. Public events are for example a concert in the park or a game, where there is a general knowledge about the event and its details. A private event can appear as an entry in the user calendar and include information about the event in a calendar app.","title":"Event"},{"location":"reference/actions/event/#eventfind","text":"This API provides us with events information. Event . find ( date_time : Optional [ DateTime ], location : Optional [ Location ], event_name : Optional [ EventName ], event_calendar : Optional [ EventCalendar ], resource : Optional [ Resurce ] ) : Iterable [ EventEntity ] Arguments Name Type Optional Description date_time DateTime Yes Date and time of the event location Location Yes Event location event_category EventCategory Yes The event name event_name EventName Yes The event name event_calendar EventCalendar Yes The calendar name where the event should be listed resource Resource Yes The event resource application Returns Type Description Iterable[EventEntity] Iterable of EventEntity objects Example When is the Eagles concert with Chris Stapleton coming to Dallas? event_name = EventName . resolve_from_text ( \"Eagles concert with Chris Stapleton\" ) event_category = EventCategory . resolve_from_text ( \"concert\" ) location = Location . resolve_from_text ( \"Dallas\" ) events = Event . find ( event_name = event_name , event_category = event_category , location = location ) response = events Responder . respond ( response = response ) Example Show me my next meeting on my work calendar. event_category = EventCategory . resolve_from_text ( \"meeting\" ) event_calendar = EventCalendar . resolve_from_text ( \"my work calendar\" ) events = Event . find ( event_category = event_category , event_calendar = event_calendar ) events = events . first () response = events Responder . respond ( response = response )","title":"Event.find"},{"location":"reference/actions/message/","text":"Message Message.get_messages This API provides us the messages in our mobile device. Message . get_messages ( date_time : Optional [ DateTime ], sender : Optional [ Contact ], recipient : Optional [ Contact ], content : Optional [ Content ], message_status : Optional [ MessageStatus ], message_content_type : Optional [ MessageContentType ], resource : Optional [ Resurce ] ) : Iterable [ MessageEntity ] Arguments Name Type Optional Description date_time DateTime Yes Date and time the message was recieved sender Contact Yes Message sender recipient Contact Yes Message recipient content Content Yes Content within the message message_status MessageStatus Yes The message status. For example, \"unread\" or \"new\" message_content_type MessageContentType Yes The message content type resource Resource Yes The message resource application Returns Type Description Iterable[MessageEntity] Iterable of MessageEntity objects Example Read the last message from aunt Bessy contact = Contact . resolve_from_text ( \"aunt Bessy\" ) sender = contact messages = Message . get_messages ( sender = sender ) message = messages . last () response = message Responder . respond ( response = response ) Message.send_message This API provides us the functionality of sending a message. Message . send_message ( recipient : Optional [ Contact ], content : Optional [ Content ], message_content_type : Optional [ MessageContentType ], resource : Optional [ Resurce ] ) : MessageEntity Arguments Name Type Optional Description recipient Contact Yes Message recipient content Content Yes Content within the message message_content_type MessageContentType Yes The message content type resource Resource Yes The message resource application Returns Type Description MessageEntity The message object that was sent Example Record a voice message for Daryl contact = Contact . resolve_from_text ( \"Daryl\" ) sender = contact message_content_type = MessageContentType . resolve_from_text ( \"voice\" ) messages = Message . send_message ( sender = sender , message_content_type = message_content_type ) Message.reply_message This API provides us the functionality of replying to a message, when the user explicitly states a reply action. Message . reply_message ( recipient : Optional [ Contact ], content : Optional [ Content ], message_content_type : Optional [ MessageContentType ], resource : Optional [ Resurce ] ) : MessageEntity Arguments Name Type Optional Description recipient Contact Yes Message recipient content Content Yes Content within the message message_content_type MessageContentType Yes The message content type resource Resource Yes The message resource application Returns Type Description MessageEntity The message object that was sent Example Reply with a voice message to Stephanie on Whatsapp contact = Contact . resolve_from_text ( \"Stephanie\" ) sender = contact message_content_type = MessageContentType . resolve_from_text ( \"voice\" ) resource = Resource . resolve_from_text ( \"Whatsapp\" ) messages = Message . reply_message ( sender = sender , message_content_type = message_content_type , resource = resource ) Message.delete_messages This API provides us the functionality to delete specific message or a group of messages. Message . reply_messages ( message : MessageEntity | List [ MessageEntity ] ) : None Arguments Name Type Optional Description messages MessageEntity|List[MessageEntity] No A specific message or a list of messages to delete Returns This function does not return. Example Delete the last 2 messages messages = Message . get_messages () messages = messages . last ( 2 ) Message . delete_messages ( messages = messages )","title":"Message"},{"location":"reference/actions/message/#message","text":"","title":"Message"},{"location":"reference/actions/message/#messageget_messages","text":"This API provides us the messages in our mobile device. Message . get_messages ( date_time : Optional [ DateTime ], sender : Optional [ Contact ], recipient : Optional [ Contact ], content : Optional [ Content ], message_status : Optional [ MessageStatus ], message_content_type : Optional [ MessageContentType ], resource : Optional [ Resurce ] ) : Iterable [ MessageEntity ] Arguments Name Type Optional Description date_time DateTime Yes Date and time the message was recieved sender Contact Yes Message sender recipient Contact Yes Message recipient content Content Yes Content within the message message_status MessageStatus Yes The message status. For example, \"unread\" or \"new\" message_content_type MessageContentType Yes The message content type resource Resource Yes The message resource application Returns Type Description Iterable[MessageEntity] Iterable of MessageEntity objects Example Read the last message from aunt Bessy contact = Contact . resolve_from_text ( \"aunt Bessy\" ) sender = contact messages = Message . get_messages ( sender = sender ) message = messages . last () response = message Responder . respond ( response = response )","title":"Message.get_messages"},{"location":"reference/actions/message/#messagesend_message","text":"This API provides us the functionality of sending a message. Message . send_message ( recipient : Optional [ Contact ], content : Optional [ Content ], message_content_type : Optional [ MessageContentType ], resource : Optional [ Resurce ] ) : MessageEntity Arguments Name Type Optional Description recipient Contact Yes Message recipient content Content Yes Content within the message message_content_type MessageContentType Yes The message content type resource Resource Yes The message resource application Returns Type Description MessageEntity The message object that was sent Example Record a voice message for Daryl contact = Contact . resolve_from_text ( \"Daryl\" ) sender = contact message_content_type = MessageContentType . resolve_from_text ( \"voice\" ) messages = Message . send_message ( sender = sender , message_content_type = message_content_type )","title":"Message.send_message"},{"location":"reference/actions/message/#messagereply_message","text":"This API provides us the functionality of replying to a message, when the user explicitly states a reply action. Message . reply_message ( recipient : Optional [ Contact ], content : Optional [ Content ], message_content_type : Optional [ MessageContentType ], resource : Optional [ Resurce ] ) : MessageEntity Arguments Name Type Optional Description recipient Contact Yes Message recipient content Content Yes Content within the message message_content_type MessageContentType Yes The message content type resource Resource Yes The message resource application Returns Type Description MessageEntity The message object that was sent Example Reply with a voice message to Stephanie on Whatsapp contact = Contact . resolve_from_text ( \"Stephanie\" ) sender = contact message_content_type = MessageContentType . resolve_from_text ( \"voice\" ) resource = Resource . resolve_from_text ( \"Whatsapp\" ) messages = Message . reply_message ( sender = sender , message_content_type = message_content_type , resource = resource )","title":"Message.reply_message"},{"location":"reference/actions/message/#messagedelete_messages","text":"This API provides us the functionality to delete specific message or a group of messages. Message . reply_messages ( message : MessageEntity | List [ MessageEntity ] ) : None Arguments Name Type Optional Description messages MessageEntity|List[MessageEntity] No A specific message or a list of messages to delete Returns This function does not return. Example Delete the last 2 messages messages = Message . get_messages () messages = messages . last ( 2 ) Message . delete_messages ( messages = messages )","title":"Message.delete_messages"},{"location":"reference/actions/navigation/","text":"Navigation Navigation.find_directions This API can support a user request for getting directions from a specific origin to a destination at a specific time. Navigation . find_directions ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationDirectionEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Required Date/time for departure avoid_nav_road_condition NavRoadCondition Yes Navigation road condition to avoid nav_travel_method NavTravelMethod Yes Navigation travel method. Defaults to car driving, so use it only in case the travel of method is not a car. Returns Type Description List[NavigationDirectionEntity] A list of NavigationRoute objects, which are sorted by default according to the app defined best routes criteria. Example Get directions from Manhattan to Newark that avoid tollways. origin = Location . resolve_from_text ( \"Manhattan\" ) destination = Location . resolve_from_text ( \"Newark\" ) avoid_nav_road_condition = NavRoadCondition . resolve_from_text ( \"tollways\" ) navigation_directions = Navigation . find_directions ( origin = origin , destination = destination , avoid_nav_road_condition = avoid_nav_road_condition ) Responder . respond ( response = navigation_directions ) Navigation.find_distance This API can support a user request for getting directions from a specific origin to a destination at a specific time. Navigation . find_distance ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationDistanceEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Required Date/time for departure avoid_nav_road_condition NavRoadCondition Yes NavigationDistance road condition to avoid nav_travel_method NavTravelMethod Yes NavigationDistance method Returns Type Description List[NavigationDistanceEntity] A list of NavigationDistanceEntity objects, which are sorted by default according to the app defined best routes criteria. Example How far is New York from Boston? origin = Location . resolve_from_text ( \"New York\" ) destination = Location . resolve_from_text ( \"Boston\" ) navigation_distance = Navigation . find_distance ( origin = origin , destination = destination ) Responder . respond ( response = navigation_distance ) Navigation.find_duration This API can support a user request for estimating the duration for travelling from one place to another. Navigation . find_duration ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationDurationEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Required Date/time for departure avoid_nav_road_condition NavRoadCondition Yes Navigation road condition to avoid nav_travel_method NavTravelMethod Yes Navigation method Returns Type Description NavigationDurationEntity A list of NavigationDurationEntity objects that provide the estimated travel duration response. Example How long is my drive to Reno, Nevada? destination = Location . resolve_from_text ( \"Reno, Nevada\" ) nav_travel_method = DateTime . resolve_from_text ( \"drive\" ) navigation_duration = Navigation . find_duration ( destination = destination , nav_travel_method = nav_travel_method ) Responder . respond ( response = navigation_duration ) Navigation.find_estimated_arrival This API can support a user request for estimating an arrival time to a place. Navigation . find_estimated_arrival ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], arrival_date_Time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationEstimatedArrivalEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Date/time of departure arrival_date_time DateTime Yes Required Date/time for arrival avoid_nav_road_condition NavRoadCondition Yes Navigation road condition to avoid nav_travel_method NavTravelMethod Yes Navigation method Returns Type Description List[NavigationEstimatedArrivalEntity] A list of NavigationEstimatedArrivalEntity objects that provides the estimated arrival information, like arrival time, to a destination. This list is returned sorted by default according to the app specific sorting criteria. Example Will traffic make me late for work at 5pm if I leave now destination = Location . resolve_from_text ( \"work\" ) arrival_date_time = DateTime . resolve_from_text ( \"5pm\" ) departure_date_time = DateTime . resolve_from_text ( \"now\" ) navigation_estimated_arrival = Navigation . find_estimated_arrival ( destination = destination , departure_date_time = departure_date_time , arrival_date_time = arrival_date_time ) Responder . respond ( response = navigation_estimated_arrival ) Navigation.find_estimated_departure This API can support a user request for estimating departure information from a place. Navigation . find_estimated_departure ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], arrival_date_Time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationEstimatedDepartureEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Required Date/time for departure arrival_date_time DateTime Yes Date/time of arrival avoid_nav_road_condition NavRoadCondition Yes NavigationEstimatedDeparture road condition to avoid nav_travel_method NavTravelMethod Yes NavigationEstimatedDeparture method Returns Type Description List[NavigationEstimatedDepartureEntity] A list of NavigationEstimatedDepartureEntity objects that provides the estimated departure information, like time to depart, from an origin. This list is returned sorted by default according to the app specific sorting criteria. Example I have to pick someone up at the airport during rush hour, what time should I leave home in order to meet a 6PM flight destination = Location . resolve_from_text ( \"the airport\" ) origin = Location . resolve_from_text ( \"home\" ) arrival_date_time = DateTime . resolve_from_text ( \"a 6PM flight\" ) navigation_estimated_departure = Navigation . find_estimated_departure ( destination = destination , origin = origin , arrival_date_time = arrival_date_time ) Responder . respond ( response = navigation_estimated_departure ) Navigation.find_traffic_info This API can support a user request for information on traffic conditions. Navigation . find_traffic_info ( location : Optional [ Location ], origin : Optional [ Location ], destination : Optional [ Location ], date_time : Optional [ DateTime ], departure_date_time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationTrafficInfoEntity ] Arguments Name Type Optional Description origin Location Yes Origin object location Location Yes Requested location for traffic infomration destination Location Yes Destination object date_time DateTime Yes Requested date and time for traffic information departure_date_time DateTime Yes Required Date/time for departure avoid_nav_road_condition NavRoadCondition Yes NavigationTrafficInfo road condition to avoid nav_travel_method NavTravelMethod Yes NavigationTrafficInfo method Returns Type Description List[NavigationTrafficInfoEntity] A list of NavigationTrafficInfoEntity objects that provides the estimated traffic information. Example Is traffic heavy right now in Minneapolis date_time = DateTime . resolve_from_text ( \"right now\" ) location = Location . resolve_from_text ( \"Minneapolis\" ) traffic_infos = Navigation . find_traffic_info ( date_time = date_time , location = location ) Responder . respond ( response = traffic_infos )","title":"Navigation"},{"location":"reference/actions/navigation/#navigation","text":"","title":"Navigation"},{"location":"reference/actions/navigation/#navigationfind_directions","text":"This API can support a user request for getting directions from a specific origin to a destination at a specific time. Navigation . find_directions ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationDirectionEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Required Date/time for departure avoid_nav_road_condition NavRoadCondition Yes Navigation road condition to avoid nav_travel_method NavTravelMethod Yes Navigation travel method. Defaults to car driving, so use it only in case the travel of method is not a car. Returns Type Description List[NavigationDirectionEntity] A list of NavigationRoute objects, which are sorted by default according to the app defined best routes criteria. Example Get directions from Manhattan to Newark that avoid tollways. origin = Location . resolve_from_text ( \"Manhattan\" ) destination = Location . resolve_from_text ( \"Newark\" ) avoid_nav_road_condition = NavRoadCondition . resolve_from_text ( \"tollways\" ) navigation_directions = Navigation . find_directions ( origin = origin , destination = destination , avoid_nav_road_condition = avoid_nav_road_condition ) Responder . respond ( response = navigation_directions )","title":"Navigation.find_directions"},{"location":"reference/actions/navigation/#navigationfind_distance","text":"This API can support a user request for getting directions from a specific origin to a destination at a specific time. Navigation . find_distance ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationDistanceEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Required Date/time for departure avoid_nav_road_condition NavRoadCondition Yes NavigationDistance road condition to avoid nav_travel_method NavTravelMethod Yes NavigationDistance method Returns Type Description List[NavigationDistanceEntity] A list of NavigationDistanceEntity objects, which are sorted by default according to the app defined best routes criteria. Example How far is New York from Boston? origin = Location . resolve_from_text ( \"New York\" ) destination = Location . resolve_from_text ( \"Boston\" ) navigation_distance = Navigation . find_distance ( origin = origin , destination = destination ) Responder . respond ( response = navigation_distance )","title":"Navigation.find_distance"},{"location":"reference/actions/navigation/#navigationfind_duration","text":"This API can support a user request for estimating the duration for travelling from one place to another. Navigation . find_duration ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationDurationEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Required Date/time for departure avoid_nav_road_condition NavRoadCondition Yes Navigation road condition to avoid nav_travel_method NavTravelMethod Yes Navigation method Returns Type Description NavigationDurationEntity A list of NavigationDurationEntity objects that provide the estimated travel duration response. Example How long is my drive to Reno, Nevada? destination = Location . resolve_from_text ( \"Reno, Nevada\" ) nav_travel_method = DateTime . resolve_from_text ( \"drive\" ) navigation_duration = Navigation . find_duration ( destination = destination , nav_travel_method = nav_travel_method ) Responder . respond ( response = navigation_duration )","title":"Navigation.find_duration"},{"location":"reference/actions/navigation/#navigationfind_estimated_arrival","text":"This API can support a user request for estimating an arrival time to a place. Navigation . find_estimated_arrival ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], arrival_date_Time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationEstimatedArrivalEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Date/time of departure arrival_date_time DateTime Yes Required Date/time for arrival avoid_nav_road_condition NavRoadCondition Yes Navigation road condition to avoid nav_travel_method NavTravelMethod Yes Navigation method Returns Type Description List[NavigationEstimatedArrivalEntity] A list of NavigationEstimatedArrivalEntity objects that provides the estimated arrival information, like arrival time, to a destination. This list is returned sorted by default according to the app specific sorting criteria. Example Will traffic make me late for work at 5pm if I leave now destination = Location . resolve_from_text ( \"work\" ) arrival_date_time = DateTime . resolve_from_text ( \"5pm\" ) departure_date_time = DateTime . resolve_from_text ( \"now\" ) navigation_estimated_arrival = Navigation . find_estimated_arrival ( destination = destination , departure_date_time = departure_date_time , arrival_date_time = arrival_date_time ) Responder . respond ( response = navigation_estimated_arrival )","title":"Navigation.find_estimated_arrival"},{"location":"reference/actions/navigation/#navigationfind_estimated_departure","text":"This API can support a user request for estimating departure information from a place. Navigation . find_estimated_departure ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], arrival_date_Time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationEstimatedDepartureEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Required Date/time for departure arrival_date_time DateTime Yes Date/time of arrival avoid_nav_road_condition NavRoadCondition Yes NavigationEstimatedDeparture road condition to avoid nav_travel_method NavTravelMethod Yes NavigationEstimatedDeparture method Returns Type Description List[NavigationEstimatedDepartureEntity] A list of NavigationEstimatedDepartureEntity objects that provides the estimated departure information, like time to depart, from an origin. This list is returned sorted by default according to the app specific sorting criteria. Example I have to pick someone up at the airport during rush hour, what time should I leave home in order to meet a 6PM flight destination = Location . resolve_from_text ( \"the airport\" ) origin = Location . resolve_from_text ( \"home\" ) arrival_date_time = DateTime . resolve_from_text ( \"a 6PM flight\" ) navigation_estimated_departure = Navigation . find_estimated_departure ( destination = destination , origin = origin , arrival_date_time = arrival_date_time ) Responder . respond ( response = navigation_estimated_departure )","title":"Navigation.find_estimated_departure"},{"location":"reference/actions/navigation/#navigationfind_traffic_info","text":"This API can support a user request for information on traffic conditions. Navigation . find_traffic_info ( location : Optional [ Location ], origin : Optional [ Location ], destination : Optional [ Location ], date_time : Optional [ DateTime ], departure_date_time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationTrafficInfoEntity ] Arguments Name Type Optional Description origin Location Yes Origin object location Location Yes Requested location for traffic infomration destination Location Yes Destination object date_time DateTime Yes Requested date and time for traffic information departure_date_time DateTime Yes Required Date/time for departure avoid_nav_road_condition NavRoadCondition Yes NavigationTrafficInfo road condition to avoid nav_travel_method NavTravelMethod Yes NavigationTrafficInfo method Returns Type Description List[NavigationTrafficInfoEntity] A list of NavigationTrafficInfoEntity objects that provides the estimated traffic information. Example Is traffic heavy right now in Minneapolis date_time = DateTime . resolve_from_text ( \"right now\" ) location = Location . resolve_from_text ( \"Minneapolis\" ) traffic_infos = Navigation . find_traffic_info ( date_time = date_time , location = location ) Responder . respond ( response = traffic_infos )","title":"Navigation.find_traffic_info"},{"location":"reference/actions/reminder/","text":"Reminder Reminder.get_reminders This API provides us the reminders in our mobile device. Reminder . get_reminders ( date_time : Optional [ DateTime ], person_reminded : Optional [ Contact ], content : Optional [ Content ], resource : Optional [ Resurce ] ) : Iterable [ ReminderEntity ] Arguments Name Type Optional Description date_time DateTime Yes Date and time the reminder was recieved person_reminded Contact Yes Reminder contact reminded content Content Yes Content within the reminder resource Resource Yes The reminder resource application Returns Type Description Iterable[ReminderEntity] Iterable of ReminderEntity objects Example What reminders do I have on next friday? contact = Contact . resolve_from_text ( \"I\" ) person_reminded = contact date_time = DateTime . resolve_from_text ( \"on next friday\" ) reminders = Reminder . get_reminders ( sender = sender , date_time = date_time ) response = reminders Responder . respond ( response = response ) Reminder.create_reminder This API provides us the functionality of creating a reminder. Reminder . create_reminder ( date_time : Optional [ DateTime ], person_reminded : Optional [ Contact ], content : Optional [ Content ], resource : Optional [ Resurce ] ) : ReminderEntity Arguments Name Type Optional Description date_time DateTime Yes Date and time the reminder was recieved person_reminded Contact Yes Reminder contact reminded content Content Yes Content within the reminder resource Resource Yes The reminder resource application Returns Type Description ReminderEntity The reminder object that was created Example Remind dance troupe to bring extra socks to practice. contact = Contact . resolve_from_text ( \"dance troupe\" ) person_reminded = contact content = Content . resolve_from_text ( \"bring extra socks to practice.\" ) reminders = Reminder . create_reminder ( person_reminded = person_reminded , content = content ) Reminder.update_reminder This API provides us the functionality of updating a reminder. Reminder . update_reminder ( date_time : Optional [ DateTime ], new_date_time : Optional [ DateTime ], person_reminded : Optional [ Contact ], new_person_reminded : Optional [ Contact ], content : Optional [ Content ], new_content : Optional [ Content ], resource : Optional [ Resurce ], new_resource : Optional [ Resurce ] ) : ReminderEntity Arguments Name Type Optional Description date_time DateTime Yes Date and time the reminder was recieved new_date_time DateTime Yes New date and time the reminder was recieved person_reminded Contact Yes Reminder contact reminded new_person_reminded Contact Yes Reminder to a new contact reminded content Content Yes Content within the reminder new_content Content Yes New content within the reminder resource Resource Yes The reminder resource application new_resource Resource Yes A new reminder resource application Returns Type Description ReminderEntity The reminder object that was updated Example Change my reminder for the doctor's appointment at 11am to 10am contact = Contact . resolve_from_text ( \"Stephanie\" ) contactt_reminded = contact content = Content . resolve_from_text ( \"the doctor's appointment\" ) date_time = DateTime . resolve_from_text ( \"at 11am\" ) new_date_time = DateTime . resolve_from_text ( \"10am\" ) reminders = Reminder . reply_reminder ( contactt_reminded = contactt_reminded , content = content , date_time = date_time , new_date_time = new_date_time ) Reminder.delete_reminders This API provides us the functionality to delete specific reminder or a group of reminders. Reminder . reply_reminders ( reminder : ReminderEntity | Iterable [ ReminderEntity ] ) : None Arguments Name Type Optional Description reminders ReminderEntity|Iterable[ReminderEntity] No A specific reminder to delete or an iterable that upon iteration - deletes every reminder Returns This function does not return. Example Cancel the reminder on the 31st that the library summer reading program shop closes. content = Content . resolve_from_text ( \"the library summer reading program shop closes\" ) date_time = DateTime . resolve_from_text ( \"on the 31st\" ) reminders = Reminder . get_reminders ( content = content , date_time = date_time ) Reminder . delete_reminders ( reminders = reminders )","title":"Reminder"},{"location":"reference/actions/reminder/#reminder","text":"","title":"Reminder"},{"location":"reference/actions/reminder/#reminderget_reminders","text":"This API provides us the reminders in our mobile device. Reminder . get_reminders ( date_time : Optional [ DateTime ], person_reminded : Optional [ Contact ], content : Optional [ Content ], resource : Optional [ Resurce ] ) : Iterable [ ReminderEntity ] Arguments Name Type Optional Description date_time DateTime Yes Date and time the reminder was recieved person_reminded Contact Yes Reminder contact reminded content Content Yes Content within the reminder resource Resource Yes The reminder resource application Returns Type Description Iterable[ReminderEntity] Iterable of ReminderEntity objects Example What reminders do I have on next friday? contact = Contact . resolve_from_text ( \"I\" ) person_reminded = contact date_time = DateTime . resolve_from_text ( \"on next friday\" ) reminders = Reminder . get_reminders ( sender = sender , date_time = date_time ) response = reminders Responder . respond ( response = response )","title":"Reminder.get_reminders"},{"location":"reference/actions/reminder/#remindercreate_reminder","text":"This API provides us the functionality of creating a reminder. Reminder . create_reminder ( date_time : Optional [ DateTime ], person_reminded : Optional [ Contact ], content : Optional [ Content ], resource : Optional [ Resurce ] ) : ReminderEntity Arguments Name Type Optional Description date_time DateTime Yes Date and time the reminder was recieved person_reminded Contact Yes Reminder contact reminded content Content Yes Content within the reminder resource Resource Yes The reminder resource application Returns Type Description ReminderEntity The reminder object that was created Example Remind dance troupe to bring extra socks to practice. contact = Contact . resolve_from_text ( \"dance troupe\" ) person_reminded = contact content = Content . resolve_from_text ( \"bring extra socks to practice.\" ) reminders = Reminder . create_reminder ( person_reminded = person_reminded , content = content )","title":"Reminder.create_reminder"},{"location":"reference/actions/reminder/#reminderupdate_reminder","text":"This API provides us the functionality of updating a reminder. Reminder . update_reminder ( date_time : Optional [ DateTime ], new_date_time : Optional [ DateTime ], person_reminded : Optional [ Contact ], new_person_reminded : Optional [ Contact ], content : Optional [ Content ], new_content : Optional [ Content ], resource : Optional [ Resurce ], new_resource : Optional [ Resurce ] ) : ReminderEntity Arguments Name Type Optional Description date_time DateTime Yes Date and time the reminder was recieved new_date_time DateTime Yes New date and time the reminder was recieved person_reminded Contact Yes Reminder contact reminded new_person_reminded Contact Yes Reminder to a new contact reminded content Content Yes Content within the reminder new_content Content Yes New content within the reminder resource Resource Yes The reminder resource application new_resource Resource Yes A new reminder resource application Returns Type Description ReminderEntity The reminder object that was updated Example Change my reminder for the doctor's appointment at 11am to 10am contact = Contact . resolve_from_text ( \"Stephanie\" ) contactt_reminded = contact content = Content . resolve_from_text ( \"the doctor's appointment\" ) date_time = DateTime . resolve_from_text ( \"at 11am\" ) new_date_time = DateTime . resolve_from_text ( \"10am\" ) reminders = Reminder . reply_reminder ( contactt_reminded = contactt_reminded , content = content , date_time = date_time , new_date_time = new_date_time )","title":"Reminder.update_reminder"},{"location":"reference/actions/reminder/#reminderdelete_reminders","text":"This API provides us the functionality to delete specific reminder or a group of reminders. Reminder . reply_reminders ( reminder : ReminderEntity | Iterable [ ReminderEntity ] ) : None Arguments Name Type Optional Description reminders ReminderEntity|Iterable[ReminderEntity] No A specific reminder to delete or an iterable that upon iteration - deletes every reminder Returns This function does not return. Example Cancel the reminder on the 31st that the library summer reading program shop closes. content = Content . resolve_from_text ( \"the library summer reading program shop closes\" ) date_time = DateTime . resolve_from_text ( \"on the 31st\" ) reminders = Reminder . get_reminders ( content = content , date_time = date_time ) Reminder . delete_reminders ( reminders = reminders )","title":"Reminder.delete_reminders"},{"location":"reference/actions/responder/","text":"Responder Responder.respond Whenever users ask quetions that requires a specific response, or request something to be displayed or read to them - this is where the Responder comes handy. It sole role is to deliver the information to the user on screen or on audio. Responder . find_events ( response : Entity ) : None Arguments Name Type Optional Description response Entity|List[Entity] No The Responder is able to transform any given Entity or a list of Entity to a user expected response form to the user. Note Entity is the base class of all entities returned by any of the other actions listed in this reference. Returns This function does not return. Example When is the Eagles concert with Chris Stapleton coming to Dallas? event_name = ResponderName . resolve_from_text ( \"Eagles concert with Chris Stapleton\" ) event_category = ResponderCategory . resolve_from_text ( \"concert\" ) location = Location . resolve_from_text ( \"Dallas\" ) events = Event . find ( event_name = event_name , event_category = event_category , location = location ) Responder . respond ( response = events ) Example Show me my next meeting on my work calendar. event_category = ResponderCategory . resolve_from_text ( \"meeting\" ) event_calendar = ResponderCalendar . resolve_from_text ( \"my work calendar\" ) events = Event . find ( event_category = event_category , event_calendar = event_calendar ) events = events . first () Responder . respond ( response = events )","title":"Responder"},{"location":"reference/actions/responder/#responder","text":"","title":"Responder"},{"location":"reference/actions/responder/#responderrespond","text":"Whenever users ask quetions that requires a specific response, or request something to be displayed or read to them - this is where the Responder comes handy. It sole role is to deliver the information to the user on screen or on audio. Responder . find_events ( response : Entity ) : None Arguments Name Type Optional Description response Entity|List[Entity] No The Responder is able to transform any given Entity or a list of Entity to a user expected response form to the user. Note Entity is the base class of all entities returned by any of the other actions listed in this reference. Returns This function does not return. Example When is the Eagles concert with Chris Stapleton coming to Dallas? event_name = ResponderName . resolve_from_text ( \"Eagles concert with Chris Stapleton\" ) event_category = ResponderCategory . resolve_from_text ( \"concert\" ) location = Location . resolve_from_text ( \"Dallas\" ) events = Event . find ( event_name = event_name , event_category = event_category , location = location ) Responder . respond ( response = events ) Example Show me my next meeting on my work calendar. event_category = ResponderCategory . resolve_from_text ( \"meeting\" ) event_calendar = ResponderCalendar . resolve_from_text ( \"my work calendar\" ) events = Event . find ( event_category = event_category , event_calendar = event_calendar ) events = events . first () Responder . respond ( response = events )","title":"Responder.respond"},{"location":"reference/actions/shopping/","text":"Shopping Shopping Shopping.find_stores This API allows us to find stores according to specific criteria, like the products sold in these stores, or when these stores are open. Shopping . find_store ( date_time : Optional [ DateTime ], location : Optional [ Location ], product : Optional [ Product ], place_attribute : Optional [ PlaceAttribute ], ) : List [ StoreEntity ] Arguments Name Type Optional Description date_time DateTime Yes Date and time of the event location Location Yes Location of the store product CommerceCategory Yes The product sold bt the store place_attr PlaceAttribtue Yes Attributes of the store. For example, is it close or open, ratings, peak hours, etc. Returns Type Description List[StoreEntity] List of StoreEntity objects Example Find all open stores near my office that sell discounted Skippy peanut butter. place_attribute = PlaceAttribute . resolve_from_text ( \"open\" ) location = Location . resolve_from_text ( \"near my office\" ) product = Product . resolve_from_text ( \"discounted Skippy peanut butter\" ) stores = Shopping . find_stores ( place_attribute = place_attribute , location = location , product = product ) Responder . respond ( response = stores )","title":"Shopping"},{"location":"reference/actions/shopping/#shopping","text":"Shopping","title":"Shopping"},{"location":"reference/actions/shopping/#shoppingfind_stores","text":"This API allows us to find stores according to specific criteria, like the products sold in these stores, or when these stores are open. Shopping . find_store ( date_time : Optional [ DateTime ], location : Optional [ Location ], product : Optional [ Product ], place_attribute : Optional [ PlaceAttribute ], ) : List [ StoreEntity ] Arguments Name Type Optional Description date_time DateTime Yes Date and time of the event location Location Yes Location of the store product CommerceCategory Yes The product sold bt the store place_attr PlaceAttribtue Yes Attributes of the store. For example, is it close or open, ratings, peak hours, etc. Returns Type Description List[StoreEntity] List of StoreEntity objects Example Find all open stores near my office that sell discounted Skippy peanut butter. place_attribute = PlaceAttribute . resolve_from_text ( \"open\" ) location = Location . resolve_from_text ( \"near my office\" ) product = Product . resolve_from_text ( \"discounted Skippy peanut butter\" ) stores = Shopping . find_stores ( place_attribute = place_attribute , location = location , product = product ) Responder . respond ( response = stores )","title":"Shopping.find_stores"},{"location":"reference/actions/weather/","text":"Weather Weather.find_weather_forecasts This API provides us the weather forecasts. Weather . find_weather_forecasts ( date_time : Optional [ DateTime ], location : Optional [ Location ], weather_attribute : Optional [ WeatherAttribute ], weather_temperature_unit : Optional [ WeatherTemperatureUnit ] ) : Iterable [ WeatherEntity ] Arguments Name Type Optional Description date_time DateTime Yes Date and time for the weather location Location Yes Location for the weather weather_attribute WeatherAttribute Yes Weather attribute to look for in the weather forecasts weather_temperature_unit WeatherTemperatureUnit Yes Weather temperature unit to be used in the weather query Returns Type Description Iterable[WeatherEntity] Iterable of WeatherEntity objects. Each WeatherEntity provides the requested weather forecast for a time frame (e.g. for each day). Example This query should return a report by the virtual assistant upon rain tonight. Note Please note that some argument are unspecified and in that case the implementation of this method assume their value. For example, Location is not specified and therefore the system assumes the location for the weather forecasts. Is it raining tonight? weather_attribute = WeatherAttribute . resolve_from_text ( \"raining\" ) date_time = DateTime . resolve_from_text ( \"tonight\" ) weather_forecasts = Weather . find_weather_forecasts ( weather_attribute = weather_attribute , date_time = date_time ) response = weather_forecasts Responder . respond ( response = response )","title":"Weather"},{"location":"reference/actions/weather/#weather","text":"","title":"Weather"},{"location":"reference/actions/weather/#weatherfind_weather_forecasts","text":"This API provides us the weather forecasts. Weather . find_weather_forecasts ( date_time : Optional [ DateTime ], location : Optional [ Location ], weather_attribute : Optional [ WeatherAttribute ], weather_temperature_unit : Optional [ WeatherTemperatureUnit ] ) : Iterable [ WeatherEntity ] Arguments Name Type Optional Description date_time DateTime Yes Date and time for the weather location Location Yes Location for the weather weather_attribute WeatherAttribute Yes Weather attribute to look for in the weather forecasts weather_temperature_unit WeatherTemperatureUnit Yes Weather temperature unit to be used in the weather query Returns Type Description Iterable[WeatherEntity] Iterable of WeatherEntity objects. Each WeatherEntity provides the requested weather forecast for a time frame (e.g. for each day). Example This query should return a report by the virtual assistant upon rain tonight. Note Please note that some argument are unspecified and in that case the implementation of this method assume their value. For example, Location is not specified and therefore the system assumes the location for the weather forecasts. Is it raining tonight? weather_attribute = WeatherAttribute . resolve_from_text ( \"raining\" ) date_time = DateTime . resolve_from_text ( \"tonight\" ) weather_forecasts = Weather . find_weather_forecasts ( weather_attribute = weather_attribute , date_time = date_time ) response = weather_forecasts Responder . respond ( response = response )","title":"Weather.find_weather_forecasts"},{"location":"reference/actions/navigation/navigation_direction/","text":"NavigationDirection NavigationDirection.find This API can support a user request for getting directions from a specific origin to a destination at a specific time. NavigationDirection . find ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationDirectionEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Required Date/time for departure avoid_nav_road_condition NavRoadCondition Yes Navigation road condition to avoid nav_travel_method NavTravelMethod Yes Navigation method Returns Type Description List[NavigationDirectionEntity] A list of NavigationRoute objects, which are sorted by default according to the app defined best routes criteria. Example Get directions from Manhattan to Newark that avoid tollways. origin = Location . resolve_from_text ( \"Manhattan\" ) destination = Location . resolve_from_text ( \"Newark\" ) avoid_nav_road_condition = NavRoadCondition . resolve_from_text ( \"tollways\" ) navigation_directions = NavigationDirection . find ( origin = origin , destination = destination , avoid_nav_road_condition = avoid_nav_road_condition ) Responder . respond ( response = navigation_directions )","title":"NavigationDirection"},{"location":"reference/actions/navigation/navigation_direction/#navigationdirection","text":"","title":"NavigationDirection"},{"location":"reference/actions/navigation/navigation_direction/#navigationdirectionfind","text":"This API can support a user request for getting directions from a specific origin to a destination at a specific time. NavigationDirection . find ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationDirectionEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Required Date/time for departure avoid_nav_road_condition NavRoadCondition Yes Navigation road condition to avoid nav_travel_method NavTravelMethod Yes Navigation method Returns Type Description List[NavigationDirectionEntity] A list of NavigationRoute objects, which are sorted by default according to the app defined best routes criteria. Example Get directions from Manhattan to Newark that avoid tollways. origin = Location . resolve_from_text ( \"Manhattan\" ) destination = Location . resolve_from_text ( \"Newark\" ) avoid_nav_road_condition = NavRoadCondition . resolve_from_text ( \"tollways\" ) navigation_directions = NavigationDirection . find ( origin = origin , destination = destination , avoid_nav_road_condition = avoid_nav_road_condition ) Responder . respond ( response = navigation_directions )","title":"NavigationDirection.find"},{"location":"reference/actions/navigation/navigation_distance/","text":"NavigationDistance NavigationDistance.find This API can support a user request for getting directions from a specific origin to a destination at a specific time. Weather . find ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationDistanceEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Required Date/time for departure avoid_nav_road_condition NavRoadCondition Yes NavigationDistance road condition to avoid nav_travel_method NavTravelMethod Yes NavigationDistance method Returns Type Description List[NavigationDistanceEntity] A list of NavigationDistanceEntity objects, which are sorted by default according to the app defined best routes criteria. Example How far is New York from Boston? origin = Location . resolve_from_text ( \"New York\" ) destination = Location . resolve_from_text ( \"Boston\" ) navigation_distance = NavigationDistance . find ( origin = origin , destination = destination ) Responder . respond ( response = navigation_distance )","title":"NavigationDistance"},{"location":"reference/actions/navigation/navigation_distance/#navigationdistance","text":"","title":"NavigationDistance"},{"location":"reference/actions/navigation/navigation_distance/#navigationdistancefind","text":"This API can support a user request for getting directions from a specific origin to a destination at a specific time. Weather . find ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationDistanceEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Required Date/time for departure avoid_nav_road_condition NavRoadCondition Yes NavigationDistance road condition to avoid nav_travel_method NavTravelMethod Yes NavigationDistance method Returns Type Description List[NavigationDistanceEntity] A list of NavigationDistanceEntity objects, which are sorted by default according to the app defined best routes criteria. Example How far is New York from Boston? origin = Location . resolve_from_text ( \"New York\" ) destination = Location . resolve_from_text ( \"Boston\" ) navigation_distance = NavigationDistance . find ( origin = origin , destination = destination ) Responder . respond ( response = navigation_distance )","title":"NavigationDistance.find"},{"location":"reference/actions/navigation/navigation_duration/","text":"NavigationDuration NavigationDuration.find This API can support a user request for estimating the duration for travelling from one place to another. NavigationDuration . find ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationDurationEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Required Date/time for departure avoid_nav_road_condition NavRoadCondition Yes Navigation road condition to avoid nav_travel_method NavTravelMethod Yes Navigation method Returns Type Description NavigationDurationEntity A list of NavigationDurationEntity objects that provide the estimated travel duration response. Example How long is my drive to Reno, Nevada? destination = Location . resolve_from_text ( \"Reno, Nevada\" ) nav_travel_method = DateTime . resolve_from_text ( \"drive\" ) navigation_duration = NavigationDuration . find ( destination = destination , nav_travel_method = nav_travel_method ) Responder . respond ( response = navigation_duration )","title":"NavigationDuration"},{"location":"reference/actions/navigation/navigation_duration/#navigationduration","text":"","title":"NavigationDuration"},{"location":"reference/actions/navigation/navigation_duration/#navigationdurationfind","text":"This API can support a user request for estimating the duration for travelling from one place to another. NavigationDuration . find ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationDurationEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Required Date/time for departure avoid_nav_road_condition NavRoadCondition Yes Navigation road condition to avoid nav_travel_method NavTravelMethod Yes Navigation method Returns Type Description NavigationDurationEntity A list of NavigationDurationEntity objects that provide the estimated travel duration response. Example How long is my drive to Reno, Nevada? destination = Location . resolve_from_text ( \"Reno, Nevada\" ) nav_travel_method = DateTime . resolve_from_text ( \"drive\" ) navigation_duration = NavigationDuration . find ( destination = destination , nav_travel_method = nav_travel_method ) Responder . respond ( response = navigation_duration )","title":"NavigationDuration.find"},{"location":"reference/actions/navigation/navigation_estimated_arrival/","text":"NavigationEstimatedArrival NavigationEstimatedArrival.find This API can support a user request for estimating an arrival time to a place. NavigationEstimatedArrival . find ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], arrival_date_Time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationEstimatedArrivalEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Date/time of departure arrival_date_time DateTime Yes Required Date/time for arrival avoid_nav_road_condition NavRoadCondition Yes Navigation road condition to avoid nav_travel_method NavTravelMethod Yes Navigation method Returns Type Description List[NavigationEstimatedArrivalEntity] A list of NavigationEstimatedArrivalEntity objects that provides the estimated arrival information, like arrival time, to a destination. This list is returned sorted by default according to the app specific sorting criteria. Example Will traffic make me late for work at 5pm if I leave now destination = Location . resolve_from_text ( \"work\" ) arrival_date_time = DateTime . resolve_from_text ( \"5pm\" ) departure_date_time = DateTime . resolve_from_text ( \"now\" ) navigation_estimated_arrival = NavigationEstimatedArrival . find ( destination = destination , departure_date_time = departure_date_time , arrival_date_time = arrival_date_time ) Responder . respond ( response = navigation_estimated_arrival )","title":"NavigationEstimatedArrival"},{"location":"reference/actions/navigation/navigation_estimated_arrival/#navigationestimatedarrival","text":"","title":"NavigationEstimatedArrival"},{"location":"reference/actions/navigation/navigation_estimated_arrival/#navigationestimatedarrivalfind","text":"This API can support a user request for estimating an arrival time to a place. NavigationEstimatedArrival . find ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], arrival_date_Time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationEstimatedArrivalEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Date/time of departure arrival_date_time DateTime Yes Required Date/time for arrival avoid_nav_road_condition NavRoadCondition Yes Navigation road condition to avoid nav_travel_method NavTravelMethod Yes Navigation method Returns Type Description List[NavigationEstimatedArrivalEntity] A list of NavigationEstimatedArrivalEntity objects that provides the estimated arrival information, like arrival time, to a destination. This list is returned sorted by default according to the app specific sorting criteria. Example Will traffic make me late for work at 5pm if I leave now destination = Location . resolve_from_text ( \"work\" ) arrival_date_time = DateTime . resolve_from_text ( \"5pm\" ) departure_date_time = DateTime . resolve_from_text ( \"now\" ) navigation_estimated_arrival = NavigationEstimatedArrival . find ( destination = destination , departure_date_time = departure_date_time , arrival_date_time = arrival_date_time ) Responder . respond ( response = navigation_estimated_arrival )","title":"NavigationEstimatedArrival.find"},{"location":"reference/actions/navigation/navigation_estimated_departure/","text":"NavigationEstimatedDeparture NavigationEstimatedDeparture.find This API can support a user request for estimating departure information from a place. NavigationEstimatedDeparture . find ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], arrival_date_Time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationEstimatedDepartureEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Required Date/time for departure arrival_date_time DateTime Yes Date/time of arrival avoid_nav_road_condition NavRoadCondition Yes NavigationEstimatedDeparture road condition to avoid nav_travel_method NavTravelMethod Yes NavigationEstimatedDeparture method Returns Type Description List[NavigationEstimatedDepartureEntity] A list of NavigationEstimatedDepartureEntity objects that provides the estimated departure information, like time to depart, from an origin. This list is returned sorted by default according to the app specific sorting criteria. Example I have to pick someone up at the airport during rush hour, what time should I leave home in order to meet a 6PM flight destination = Location . resolve_from_text ( \"the airport\" ) origin = Location . resolve_from_text ( \"home\" ) arrival_date_time = DateTime . resolve_from_text ( \"a 6PM flight\" ) navigation_estimated_departure = NavigationEstimatedDeparture . find ( destination = destination , origin = origin , arrival_date_time = arrival_date_time ) Responder . respond ( response = navigation_estimated_departure )","title":"NavigationEstimatedDeparture"},{"location":"reference/actions/navigation/navigation_estimated_departure/#navigationestimateddeparture","text":"","title":"NavigationEstimatedDeparture"},{"location":"reference/actions/navigation/navigation_estimated_departure/#navigationestimateddeparturefind","text":"This API can support a user request for estimating departure information from a place. NavigationEstimatedDeparture . find ( origin : Optional [ Location ], destination : Optional [ Location ], departure_date_time : Optional [ DateTime ], arrival_date_Time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationEstimatedDepartureEntity ] Arguments Name Type Optional Description origin Location Yes Origin object destination Location Yes Destination object departure_date_time DateTime Yes Required Date/time for departure arrival_date_time DateTime Yes Date/time of arrival avoid_nav_road_condition NavRoadCondition Yes NavigationEstimatedDeparture road condition to avoid nav_travel_method NavTravelMethod Yes NavigationEstimatedDeparture method Returns Type Description List[NavigationEstimatedDepartureEntity] A list of NavigationEstimatedDepartureEntity objects that provides the estimated departure information, like time to depart, from an origin. This list is returned sorted by default according to the app specific sorting criteria. Example I have to pick someone up at the airport during rush hour, what time should I leave home in order to meet a 6PM flight destination = Location . resolve_from_text ( \"the airport\" ) origin = Location . resolve_from_text ( \"home\" ) arrival_date_time = DateTime . resolve_from_text ( \"a 6PM flight\" ) navigation_estimated_departure = NavigationEstimatedDeparture . find ( destination = destination , origin = origin , arrival_date_time = arrival_date_time ) Responder . respond ( response = navigation_estimated_departure )","title":"NavigationEstimatedDeparture.find"},{"location":"reference/actions/navigation/navigation_traffic_info/","text":"NavigationTrafficInfo NavigationTrafficInfo.find This API can support a user request for information on traffic conditions. NavigationTrafficInfo . find ( location : Optional [ Location ], origin : Optional [ Location ], destination : Optional [ Location ], date_time : Optional [ DateTime ], departure_date_time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationTrafficInfoEntity ] Arguments Name Type Optional Description origin Location Yes Origin object location Location Yes Requested location for traffic infomration destination Location Yes Destination object date_time DateTime Yes Requested date and time for traffic information departure_date_time DateTime Yes Required Date/time for departure avoid_nav_road_condition NavRoadCondition Yes NavigationTrafficInfo road condition to avoid nav_travel_method NavTravelMethod Yes NavigationTrafficInfo method Returns Type Description List[NavigationTrafficInfoEntity] A list of NavigationTrafficInfoEntity objects that provides the estimated traffic information. Example Is traffic heavy right now in Minneapolis date_time = DateTime . resolve_from_text ( \"right now\" ) location = Location . resolve_from_text ( \"Minneapolis\" ) traffic_infos = NavigationTrafficInfo . find ( date_time = date_time , location = location ) Responder . respond ( response = traffic_infos )","title":"NavigationTrafficInfo"},{"location":"reference/actions/navigation/navigation_traffic_info/#navigationtrafficinfo","text":"","title":"NavigationTrafficInfo"},{"location":"reference/actions/navigation/navigation_traffic_info/#navigationtrafficinfofind","text":"This API can support a user request for information on traffic conditions. NavigationTrafficInfo . find ( location : Optional [ Location ], origin : Optional [ Location ], destination : Optional [ Location ], date_time : Optional [ DateTime ], departure_date_time : Optional [ DateTime ], avoid_nav_road_condition : Optional [ NavRoadCondition ], nav_travel_method : Optional [ NavTravelMethod ] ) : List [ NavigationTrafficInfoEntity ] Arguments Name Type Optional Description origin Location Yes Origin object location Location Yes Requested location for traffic infomration destination Location Yes Destination object date_time DateTime Yes Requested date and time for traffic information departure_date_time DateTime Yes Required Date/time for departure avoid_nav_road_condition NavRoadCondition Yes NavigationTrafficInfo road condition to avoid nav_travel_method NavTravelMethod Yes NavigationTrafficInfo method Returns Type Description List[NavigationTrafficInfoEntity] A list of NavigationTrafficInfoEntity objects that provides the estimated traffic information. Example Is traffic heavy right now in Minneapolis date_time = DateTime . resolve_from_text ( \"right now\" ) location = Location . resolve_from_text ( \"Minneapolis\" ) traffic_infos = NavigationTrafficInfo . find ( date_time = date_time , location = location ) Responder . respond ( response = traffic_infos )","title":"NavigationTrafficInfo.find"},{"location":"reference/types/","text":"","title":"Index"},{"location":"reference/types/contact/","text":"Contact Contact.resolve_from_text This API allows us to resolve a Contact or a list of Contact objects from a given user input. For example, a recipient of a message or a contact to create a reminder for. Contact . resolve_from_text ( text : str ) : Contact | List [ Contact ] Arguments Name Type Optional Description text str No Textual Contact description Returns Type Description Contact | List[Contact] Contact object or a list of Contact objects based on the text parameter to this function. Example Remind me tomorrow to postpone my dentist appointment contact = Contact . resolve_from_text ( \"me\" )","title":"Contact"},{"location":"reference/types/contact/#contact","text":"","title":"Contact"},{"location":"reference/types/contact/#contactresolve_from_text","text":"This API allows us to resolve a Contact or a list of Contact objects from a given user input. For example, a recipient of a message or a contact to create a reminder for. Contact . resolve_from_text ( text : str ) : Contact | List [ Contact ] Arguments Name Type Optional Description text str No Textual Contact description Returns Type Description Contact | List[Contact] Contact object or a list of Contact objects based on the text parameter to this function. Example Remind me tomorrow to postpone my dentist appointment contact = Contact . resolve_from_text ( \"me\" )","title":"Contact.resolve_from_text"},{"location":"reference/types/content/","text":"Content Content.resolve_from_text This API allows us to resolve the textual content from a given user input, for example, for a reminder or a text message. Content . resolve_from_text ( text : str ) : Content Arguments Name Type Optional Description text str No Textual content Returns Type Description Content | List[Content] A Content object or a list of Content objects based on the text parameter to this function. Example A Content can be a day, a specific time, or any publicly known place (for example, Times Square). Remind me tomorrow to postpone my dentist appointment content = Content . resolve_from_text ( \"postpone my dentist appointment\" ) Tip When resolving Content from a text we will usually ignore reference words like \"to\", which are not part of the body of the content (like the message or the reminder). Content.resolve_from_entity This API allows us to resolve a Content from a given entity or list of entities, usually the result of a previous resolve_from_text() operation. Content . resolve_from_entity ( entity : Entity | List [ Entity ] ) : DateTime | List [ DateTime ] Arguments Name Type Optional Description entity Entity | List[Entity] No An Entity object to be transformed to a Content Returns Type Description Content | List[Content] A Content object or a list of Content objects based on the text parameter to this function. Example A Content can be be inferred from different objects. For example, messaging navigation directions where the directions should be transformed to the message content. Send Joshua my arrival time to his house if I leave now location = Location . resolve_from_text ( \"his house\" ) destination = location date_time = DateTime . resolve_from_text ( \"now\" ) departure_date_time = date_time estimated_arrival_time = Navigation . get_estimated_arrival_timie ( destination = destination , departure_date_time = departure_date_time ) content = Content . resolve_from_entity ( estimated_arrival_time ) ...","title":"Content"},{"location":"reference/types/content/#content","text":"","title":"Content"},{"location":"reference/types/content/#contentresolve_from_text","text":"This API allows us to resolve the textual content from a given user input, for example, for a reminder or a text message. Content . resolve_from_text ( text : str ) : Content Arguments Name Type Optional Description text str No Textual content Returns Type Description Content | List[Content] A Content object or a list of Content objects based on the text parameter to this function. Example A Content can be a day, a specific time, or any publicly known place (for example, Times Square). Remind me tomorrow to postpone my dentist appointment content = Content . resolve_from_text ( \"postpone my dentist appointment\" ) Tip When resolving Content from a text we will usually ignore reference words like \"to\", which are not part of the body of the content (like the message or the reminder).","title":"Content.resolve_from_text"},{"location":"reference/types/content/#contentresolve_from_entity","text":"This API allows us to resolve a Content from a given entity or list of entities, usually the result of a previous resolve_from_text() operation. Content . resolve_from_entity ( entity : Entity | List [ Entity ] ) : DateTime | List [ DateTime ] Arguments Name Type Optional Description entity Entity | List[Entity] No An Entity object to be transformed to a Content Returns Type Description Content | List[Content] A Content object or a list of Content objects based on the text parameter to this function. Example A Content can be be inferred from different objects. For example, messaging navigation directions where the directions should be transformed to the message content. Send Joshua my arrival time to his house if I leave now location = Location . resolve_from_text ( \"his house\" ) destination = location date_time = DateTime . resolve_from_text ( \"now\" ) departure_date_time = date_time estimated_arrival_time = Navigation . get_estimated_arrival_timie ( destination = destination , departure_date_time = departure_date_time ) content = Content . resolve_from_entity ( estimated_arrival_time ) ...","title":"Content.resolve_from_entity"},{"location":"reference/types/date_time/","text":"DateTime DateTime.resolve_from_text This API allows us to resolve a date or time decription from a given text. DateTime . resolve_from_text ( text : str ) : DateTime | List [ DateTime ] Arguments Name Type Optional Description text str No Textual decription of a time description Returns Type Description DateTime | List[DateTime] DateTime object or a list of DateTime objects based on the text parameter to this function. Example A DateTime can be a day, a specific time, or any publicly known place (for example, Times Square). If I leave now will I get to 37 Spring St by 12:30 pm? date_time = DateTime . resolve_from_text ( \"now\" ) DateTime.resolve_from_entity This API allows us to resolve a DateTime from a given entity or list of entities, usually the result of a previous resolve_from_text() operation. DateTime . resolve_from_entity ( entity : Entity | List [ Entity ] ) : DateTime | List [ DateTime ] Arguments Name Type Optional Description entity Entity | List[Entity] No An Entity object to be transformed to a DateTime Returns Type Description DateTime | List[DateTime] A DateTime object or a list of DateTime objects based on the text parameter to this function. Example A DateTime can be be inferred from different objects. For example, an event time or the estimated time of arrival to a place. Will there be traffic downtown during the Rockets game? event_name = EventName . resolve_from_text ( \"the Rockets game\" ) event = Event . find ( event_name = event_name ) date_time = DateTime . resolve_from_entity ( event ) ...","title":"DateTime"},{"location":"reference/types/date_time/#datetime","text":"","title":"DateTime"},{"location":"reference/types/date_time/#datetimeresolve_from_text","text":"This API allows us to resolve a date or time decription from a given text. DateTime . resolve_from_text ( text : str ) : DateTime | List [ DateTime ] Arguments Name Type Optional Description text str No Textual decription of a time description Returns Type Description DateTime | List[DateTime] DateTime object or a list of DateTime objects based on the text parameter to this function. Example A DateTime can be a day, a specific time, or any publicly known place (for example, Times Square). If I leave now will I get to 37 Spring St by 12:30 pm? date_time = DateTime . resolve_from_text ( \"now\" )","title":"DateTime.resolve_from_text"},{"location":"reference/types/date_time/#datetimeresolve_from_entity","text":"This API allows us to resolve a DateTime from a given entity or list of entities, usually the result of a previous resolve_from_text() operation. DateTime . resolve_from_entity ( entity : Entity | List [ Entity ] ) : DateTime | List [ DateTime ] Arguments Name Type Optional Description entity Entity | List[Entity] No An Entity object to be transformed to a DateTime Returns Type Description DateTime | List[DateTime] A DateTime object or a list of DateTime objects based on the text parameter to this function. Example A DateTime can be be inferred from different objects. For example, an event time or the estimated time of arrival to a place. Will there be traffic downtown during the Rockets game? event_name = EventName . resolve_from_text ( \"the Rockets game\" ) event = Event . find ( event_name = event_name ) date_time = DateTime . resolve_from_entity ( event ) ...","title":"DateTime.resolve_from_entity"},{"location":"reference/types/event_calendar/","text":"EventCalendar EventCalendar.resolve_from_text This API allows us to resolve a calendar name listing an event from a given user input. EventCalendar . resolve_from_text ( text : str ) : EventCalendar | List [ EventCalendar ] Arguments Name Type Optional Description text str No Textual EventCalendar description Returns Type Description EventCalendar | List[EventCalendar] EventCalendar object or a list of EventCalendar objects based on the text parameter to this function. Example A EventCalendar is the name of the calendar journey to search or create meeting in. Do I have a townhall meeting this Friday on my work calendar? event_calendar = EventCalendar . resolve_from_text ( \"my work calendar\" )","title":"EventCalendar"},{"location":"reference/types/event_calendar/#eventcalendar","text":"","title":"EventCalendar"},{"location":"reference/types/event_calendar/#eventcalendarresolve_from_text","text":"This API allows us to resolve a calendar name listing an event from a given user input. EventCalendar . resolve_from_text ( text : str ) : EventCalendar | List [ EventCalendar ] Arguments Name Type Optional Description text str No Textual EventCalendar description Returns Type Description EventCalendar | List[EventCalendar] EventCalendar object or a list of EventCalendar objects based on the text parameter to this function. Example A EventCalendar is the name of the calendar journey to search or create meeting in. Do I have a townhall meeting this Friday on my work calendar? event_calendar = EventCalendar . resolve_from_text ( \"my work calendar\" )","title":"EventCalendar.resolve_from_text"},{"location":"reference/types/event_category/","text":"EventCategory EventCategory.resolve_from_text This API allows us to resolve an event category from a given user input. EventCategory . resolve_from_text ( text : str ) : EventCategory | List [ EventCategory ] Arguments Name Type Optional Description text str No Textual description of the event category Returns Type Description EventCategory | List[EventCategory] EventCategory object or a list of EventCategory objects based on the text parameter to this function. Example Show me Christmas parties for kids in atlanta event_category = EventCategory . resolve_from_text ( \"parties\" )","title":"EventCategory"},{"location":"reference/types/event_category/#eventcategory","text":"","title":"EventCategory"},{"location":"reference/types/event_category/#eventcategoryresolve_from_text","text":"This API allows us to resolve an event category from a given user input. EventCategory . resolve_from_text ( text : str ) : EventCategory | List [ EventCategory ] Arguments Name Type Optional Description text str No Textual description of the event category Returns Type Description EventCategory | List[EventCategory] EventCategory object or a list of EventCategory objects based on the text parameter to this function. Example Show me Christmas parties for kids in atlanta event_category = EventCategory . resolve_from_text ( \"parties\" )","title":"EventCategory.resolve_from_text"},{"location":"reference/types/event_name/","text":"EventName EventName.resolve_from_text This API allows us to resolve a calendar event name from a given user input. EventName . resolve_from_text ( text : str ) : EventName | List [ EventName ] Arguments Name Type Optional Description text str No Textual description of the event name Returns Type Description EventName | List[EventName] EventName object or a list of EventName objects based on the text parameter to this function. Example A EventName is the reference to name or title of calendar meetings. Do I have a townhall meeting this Friday on my work calendar? event_name = EventName . resolve_from_text ( \"a townhall meeting\" )","title":"EventName"},{"location":"reference/types/event_name/#eventname","text":"","title":"EventName"},{"location":"reference/types/event_name/#eventnameresolve_from_text","text":"This API allows us to resolve a calendar event name from a given user input. EventName . resolve_from_text ( text : str ) : EventName | List [ EventName ] Arguments Name Type Optional Description text str No Textual description of the event name Returns Type Description EventName | List[EventName] EventName object or a list of EventName objects based on the text parameter to this function. Example A EventName is the reference to name or title of calendar meetings. Do I have a townhall meeting this Friday on my work calendar? event_name = EventName . resolve_from_text ( \"a townhall meeting\" )","title":"EventName.resolve_from_text"},{"location":"reference/types/location/","text":"Location Location.resolve_from_text This API allows us to resolve a location from a given text. A text can also refer to multiple locations. For example, the text \"every drug store in my area\" should yield a list of Location objects. Location . resolve_from_text ( text : str ) : Location | List [ Location ] Arguments Name Type Optional Description text str No Textual decription of a location Returns Type Description Location | List[Location] Location object or a list of Location objects based on the text parameter to this function. Example A Location can be an address, a city or a country name, or any publicly known place (for example, Times Square). If I leave now will I get to 37 Spring St by 12:30 pm? location = Location . resolve_from_text ( \"37 Spring St\" ) A Location can be also be private to the user. It is in the API responsibility to infer a user specific location. Is it currently raining at home? location = Location . resolve_from_text ( \"at home\" ) Location.resolve_from_entity This API allows us to resolve a location from a given entity or list of entities, usually the result of a previous resolve_from_text() operation. Content . resolve_from_entity ( entity : Entity | List [ Entity ] ) : Location | List [ Location ] Arguments Name Type Optional Description entity Entity | List[Entity] No An Entity object to be transformed to a Location Returns Type Description Location | List[Location] A location object or a list of Location objects based on the text parameter to this function. Example A Location can be be inferred from different objects. One example may be a meeting location or an event venue. Directions to the Rockets game event_name = EventName . resolve_from_text ( \"the Rockets game\" ) event = Event . find ( event_name = event_name ) location = Location . resolve_from_entity ( event ) ...","title":"Location"},{"location":"reference/types/location/#location","text":"","title":"Location"},{"location":"reference/types/location/#locationresolve_from_text","text":"This API allows us to resolve a location from a given text. A text can also refer to multiple locations. For example, the text \"every drug store in my area\" should yield a list of Location objects. Location . resolve_from_text ( text : str ) : Location | List [ Location ] Arguments Name Type Optional Description text str No Textual decription of a location Returns Type Description Location | List[Location] Location object or a list of Location objects based on the text parameter to this function. Example A Location can be an address, a city or a country name, or any publicly known place (for example, Times Square). If I leave now will I get to 37 Spring St by 12:30 pm? location = Location . resolve_from_text ( \"37 Spring St\" ) A Location can be also be private to the user. It is in the API responsibility to infer a user specific location. Is it currently raining at home? location = Location . resolve_from_text ( \"at home\" )","title":"Location.resolve_from_text"},{"location":"reference/types/location/#locationresolve_from_entity","text":"This API allows us to resolve a location from a given entity or list of entities, usually the result of a previous resolve_from_text() operation. Content . resolve_from_entity ( entity : Entity | List [ Entity ] ) : Location | List [ Location ] Arguments Name Type Optional Description entity Entity | List[Entity] No An Entity object to be transformed to a Location Returns Type Description Location | List[Location] A location object or a list of Location objects based on the text parameter to this function. Example A Location can be be inferred from different objects. One example may be a meeting location or an event venue. Directions to the Rockets game event_name = EventName . resolve_from_text ( \"the Rockets game\" ) event = Event . find ( event_name = event_name ) location = Location . resolve_from_entity ( event ) ...","title":"Location.resolve_from_entity"},{"location":"reference/types/message_content_type/","text":"MessageContentType MessageContentType.resolve_from_text This API allows us to resolve the message type that should be sent. Commonly we may find the textual decription for message content type like \"audio\" or \"voice\" . It is possible that a user will specify a content type that should be interpreted as multiple content types. In that case, the API will return a list of MessageContentType objects. MessageContentType . resolve_from_text ( text : str ) : MessageContentType | List [ MessageContentType ] Arguments Name Type Optional Description text str No Textual MessageContentType description Returns Type Description MessageContentType | List[MessageContentType] MessageContentType object or a list of MessageContentType objects based on the text parameter to this function. Example Sending a voice message requires the MessageContentType to be resolved. Send a voice message to Ted message_content_type = MessageContentType . resolve_from_text ( \"voice\" )","title":"MessageContentType"},{"location":"reference/types/message_content_type/#messagecontenttype","text":"","title":"MessageContentType"},{"location":"reference/types/message_content_type/#messagecontenttyperesolve_from_text","text":"This API allows us to resolve the message type that should be sent. Commonly we may find the textual decription for message content type like \"audio\" or \"voice\" . It is possible that a user will specify a content type that should be interpreted as multiple content types. In that case, the API will return a list of MessageContentType objects. MessageContentType . resolve_from_text ( text : str ) : MessageContentType | List [ MessageContentType ] Arguments Name Type Optional Description text str No Textual MessageContentType description Returns Type Description MessageContentType | List[MessageContentType] MessageContentType object or a list of MessageContentType objects based on the text parameter to this function. Example Sending a voice message requires the MessageContentType to be resolved. Send a voice message to Ted message_content_type = MessageContentType . resolve_from_text ( \"voice\" )","title":"MessageContentType.resolve_from_text"},{"location":"reference/types/message_status/","text":"MessageStatus MessageStatus.resolve_from_text This API allows us to resolve a message status from a user query. Statuses like \"new\", \"unread\" or \"seen\" for messages are common to be found and should be resolved. Take note that the return value from this function can be a list of MessageStatus objects, like in the case where the user command ask \"any message status\". MessageStatus . resolve_from_text ( text : str ) : MessageStatus | List [ MessageStatus ] Arguments Name Type Optional Description text str No Textual MessageStatus description Returns Type Description MessageStatus | List[MessageStatus] MessageStatus object or a list of MessageStatus objects based on the text parameter to this function. Example A MessageStatus denote the message status \"read\" in a user command: Delete every seen message from Google to me. message_status = MessageStatus . resolve_from_text ( \"seen\" )","title":"MessageStatus"},{"location":"reference/types/message_status/#messagestatus","text":"","title":"MessageStatus"},{"location":"reference/types/message_status/#messagestatusresolve_from_text","text":"This API allows us to resolve a message status from a user query. Statuses like \"new\", \"unread\" or \"seen\" for messages are common to be found and should be resolved. Take note that the return value from this function can be a list of MessageStatus objects, like in the case where the user command ask \"any message status\". MessageStatus . resolve_from_text ( text : str ) : MessageStatus | List [ MessageStatus ] Arguments Name Type Optional Description text str No Textual MessageStatus description Returns Type Description MessageStatus | List[MessageStatus] MessageStatus object or a list of MessageStatus objects based on the text parameter to this function. Example A MessageStatus denote the message status \"read\" in a user command: Delete every seen message from Google to me. message_status = MessageStatus . resolve_from_text ( \"seen\" )","title":"MessageStatus.resolve_from_text"},{"location":"reference/types/nav_road_condition/","text":"NavRoadCondition NavRoadCondition.resolve_from_text This API allows us to resolve a road condition out of navigation related queries. NavRoadCondition . resolve_from_text ( text : str ) : NavRoadCondition | List [ NavRoadCondition ] Arguments Name Type Optional Description text str No Textual NavRoadCondition description Returns Type Description NavRoadCondition | List[NavRoadCondition] NavRoadCondition object or a list of NavRoadCondition objects based on the text parameter to this function. Example Get directions to downtown Detroit without flooding nav_road_condition = NavRoadCondition . resolve_from_text ( \"flooding\" )","title":"NavRoadCondition"},{"location":"reference/types/nav_road_condition/#navroadcondition","text":"","title":"NavRoadCondition"},{"location":"reference/types/nav_road_condition/#navroadconditionresolve_from_text","text":"This API allows us to resolve a road condition out of navigation related queries. NavRoadCondition . resolve_from_text ( text : str ) : NavRoadCondition | List [ NavRoadCondition ] Arguments Name Type Optional Description text str No Textual NavRoadCondition description Returns Type Description NavRoadCondition | List[NavRoadCondition] NavRoadCondition object or a list of NavRoadCondition objects based on the text parameter to this function. Example Get directions to downtown Detroit without flooding nav_road_condition = NavRoadCondition . resolve_from_text ( \"flooding\" )","title":"NavRoadCondition.resolve_from_text"},{"location":"reference/types/nav_travel_method/","text":"NavTravelMethod NavTravelMethod.resolve_from_text This API allows us to resolve a navigation method for travelling. Driving a car or riding a bicycle are both method of travel that can appear in a user command. NavTravelMethod . resolve_from_text ( text : str ) : NavTravelMethod | List [ NavTravelMethod ] Arguments Name Type Optional Description text str No Textual navigation travelling method description Returns Type Description NavTravelMethod NavTravelMethod object Example how long is the road to SF on the PCH riding a bicycle nav_travel_method = NavTravelMethod . resolve_from_text ( \"riding a bicycle\" )","title":"NavTravelMethod"},{"location":"reference/types/nav_travel_method/#navtravelmethod","text":"","title":"NavTravelMethod"},{"location":"reference/types/nav_travel_method/#navtravelmethodresolve_from_text","text":"This API allows us to resolve a navigation method for travelling. Driving a car or riding a bicycle are both method of travel that can appear in a user command. NavTravelMethod . resolve_from_text ( text : str ) : NavTravelMethod | List [ NavTravelMethod ] Arguments Name Type Optional Description text str No Textual navigation travelling method description Returns Type Description NavTravelMethod NavTravelMethod object Example how long is the road to SF on the PCH riding a bicycle nav_travel_method = NavTravelMethod . resolve_from_text ( \"riding a bicycle\" )","title":"NavTravelMethod.resolve_from_text"},{"location":"reference/types/place_attribute/","text":"PlaceAttribute PlaceAttribute.resolve_from_text This API allows us to resolve attributes of a place from a textual description. For example, whether a place is open or not including the openning hours of a place, or the stars review on it. Potentially, this API may result in a list of PlaceAttributes PlaceAttribute . resolve_from_text ( text : str ) : PlaceAttribute | List [ PlaceAttribute ] Arguments Name Type Optional Description text str No Textual PlaceAttribute description Returns Type Description PlaceAttribute PlaceAttribute object or a list of PlaceAttribute objects based on the text parameter to this function. Example A PlaceAttribute can be a specific app like Gmail Order 2 packages organic creamy peanut butter from WholeFood. place_attribute = PlaceAttribute . resolve_from_text ( \"open after midnight\" )","title":"PlaceAttribute"},{"location":"reference/types/place_attribute/#placeattribute","text":"","title":"PlaceAttribute"},{"location":"reference/types/place_attribute/#placeattributeresolve_from_text","text":"This API allows us to resolve attributes of a place from a textual description. For example, whether a place is open or not including the openning hours of a place, or the stars review on it. Potentially, this API may result in a list of PlaceAttributes PlaceAttribute . resolve_from_text ( text : str ) : PlaceAttribute | List [ PlaceAttribute ] Arguments Name Type Optional Description text str No Textual PlaceAttribute description Returns Type Description PlaceAttribute PlaceAttribute object or a list of PlaceAttribute objects based on the text parameter to this function. Example A PlaceAttribute can be a specific app like Gmail Order 2 packages organic creamy peanut butter from WholeFood. place_attribute = PlaceAttribute . resolve_from_text ( \"open after midnight\" )","title":"PlaceAttribute.resolve_from_text"},{"location":"reference/types/product/","text":"Product Product.resolve_from_text This API allows us to resolve a product from a text. A product is not limited to the product category but can also include the product brand and manufacturer, For example, the text \"car insurance\", \"iPhone 14\", \"Detroit deep dish pizza\" or \"polka dot black dress\" should all be reolved in this API. It is possible that given a specific text input this API will infer it as a list of Product objects. For example, \"all The Hobbit trilogy books\" should results in a list of Product objects for each book in the bespoken trilogy. Product . resolve_from_text ( text : str ) : Product | List [ Product ] Arguments Name Type Optional Description text str No Textual Product description Returns Type Description Product | List[Product] Product object or a list of Product objects based on the text parameter to this function. Example A Product can be include the product's brand, vendor, name and different features. Please note the price cmparison should be achieved using the min utility functions (see more in the Advanced Topics section). Where can I find a store cheapest price for the new Lego knights castle that has it in stock? resource = Product . resolve_from_text ( \"the new Lego knights castle\" )","title":"Product"},{"location":"reference/types/product/#product","text":"","title":"Product"},{"location":"reference/types/product/#productresolve_from_text","text":"This API allows us to resolve a product from a text. A product is not limited to the product category but can also include the product brand and manufacturer, For example, the text \"car insurance\", \"iPhone 14\", \"Detroit deep dish pizza\" or \"polka dot black dress\" should all be reolved in this API. It is possible that given a specific text input this API will infer it as a list of Product objects. For example, \"all The Hobbit trilogy books\" should results in a list of Product objects for each book in the bespoken trilogy. Product . resolve_from_text ( text : str ) : Product | List [ Product ] Arguments Name Type Optional Description text str No Textual Product description Returns Type Description Product | List[Product] Product object or a list of Product objects based on the text parameter to this function. Example A Product can be include the product's brand, vendor, name and different features. Please note the price cmparison should be achieved using the min utility functions (see more in the Advanced Topics section). Where can I find a store cheapest price for the new Lego knights castle that has it in stock? resource = Product . resolve_from_text ( \"the new Lego knights castle\" )","title":"Product.resolve_from_text"},{"location":"reference/types/resource/","text":"Resource Resource.resolve_from_text This API allows us to resolve a resource in the form of an app or a website that will use to tp perform an action. Resource . resolve_from_text ( text : str ) : Resource Arguments Name Type Optional Description text str No Textual Resource description Returns Type Description Resource Resource object Example A Resource can be a specific app like Gmail Reply back to Sue on Facebook saying I did not get the invite resource = Resource . resolve_from_text ( \"Facebook\" )","title":"Resource"},{"location":"reference/types/resource/#resource","text":"","title":"Resource"},{"location":"reference/types/resource/#resourceresolve_from_text","text":"This API allows us to resolve a resource in the form of an app or a website that will use to tp perform an action. Resource . resolve_from_text ( text : str ) : Resource Arguments Name Type Optional Description text str No Textual Resource description Returns Type Description Resource Resource object Example A Resource can be a specific app like Gmail Reply back to Sue on Facebook saying I did not get the invite resource = Resource . resolve_from_text ( \"Facebook\" )","title":"Resource.resolve_from_text"},{"location":"reference/types/weather_attribute/","text":"WeatherAttribute WeatherAttribute.resolve_from_text This API allows us to resolve a weather attribute or condition from a user input. For example, \"stormy\", \"rain\" or \"cold\" are all weather attributes. This method can possibly return a list of WeatherAttribute objects given a text input that expresses multiple weather attributes. For example, \"any winter weather\". WeatherAttribute . resolve_from_text ( text : str ) : WeatherAttribute | List [ WeatherAttribute ] Note Weather tempreature unit is represented by WeatherTemperatureUnit and is not a weather attribute. Arguments Name Type Optional Description text str No Textual WeatherAttribute description Returns Type Description WeatherAttribute | List[WeatherAttribute] WeatherAttribute object or a list of WeatherAttribute objects based on the text parameter to this function. Example A WeatherAttribute denote the weather attribute \"sunny\" in a user command: Will it be sunny with clear skies this weekend? weather_attribute = WeatherAttribute . resolve_from_text ( \"sunny with clear skies\" )","title":"WeatherAttribute"},{"location":"reference/types/weather_attribute/#weatherattribute","text":"","title":"WeatherAttribute"},{"location":"reference/types/weather_attribute/#weatherattributeresolve_from_text","text":"This API allows us to resolve a weather attribute or condition from a user input. For example, \"stormy\", \"rain\" or \"cold\" are all weather attributes. This method can possibly return a list of WeatherAttribute objects given a text input that expresses multiple weather attributes. For example, \"any winter weather\". WeatherAttribute . resolve_from_text ( text : str ) : WeatherAttribute | List [ WeatherAttribute ] Note Weather tempreature unit is represented by WeatherTemperatureUnit and is not a weather attribute. Arguments Name Type Optional Description text str No Textual WeatherAttribute description Returns Type Description WeatherAttribute | List[WeatherAttribute] WeatherAttribute object or a list of WeatherAttribute objects based on the text parameter to this function. Example A WeatherAttribute denote the weather attribute \"sunny\" in a user command: Will it be sunny with clear skies this weekend? weather_attribute = WeatherAttribute . resolve_from_text ( \"sunny with clear skies\" )","title":"WeatherAttribute.resolve_from_text"},{"location":"reference/types/weather_temperature_unit/","text":"WeatherTemperatureUnit WeatherTemperatureUnit.resolve_from_text This API allows us to resolve a requested temperature unit (like celsius or fahrenheit). Despite the fact that this function may return WeatherTemperatureUnit it is highly unlikely to find an example where a list would be returned. WeatherTemperatureUnit . resolve_from_text ( text : str ) : WeatherTemperatureUnit : List [ WeatherTemperatureUnit ] Note Weather tempreature unit is represented by WeatherTemperatureUnit and is not a weather attribute. Arguments Name Type Optional Description text str No Textual WeatherTemperatureUnit description Returns Type Description WeatherTemperatureUnit | List[WeatherTemperatureUnit] WeatherTemperatureUnit object or a list of WeatherTemperatureUnit objects based on the text parameter to this function. Example A WeatherTemperatureUnit denote the weather attribute \"sunny\" in a user command: Tell me the weather in fahrenheit. weather_temperature_unit = WeatherTemperatureUnit . resolve_from_text ( \"fahrenheit\" )","title":"WeatherTemperatureUnit"},{"location":"reference/types/weather_temperature_unit/#weathertemperatureunit","text":"","title":"WeatherTemperatureUnit"},{"location":"reference/types/weather_temperature_unit/#weathertemperatureunitresolve_from_text","text":"This API allows us to resolve a requested temperature unit (like celsius or fahrenheit). Despite the fact that this function may return WeatherTemperatureUnit it is highly unlikely to find an example where a list would be returned. WeatherTemperatureUnit . resolve_from_text ( text : str ) : WeatherTemperatureUnit : List [ WeatherTemperatureUnit ] Note Weather tempreature unit is represented by WeatherTemperatureUnit and is not a weather attribute. Arguments Name Type Optional Description text str No Textual WeatherTemperatureUnit description Returns Type Description WeatherTemperatureUnit | List[WeatherTemperatureUnit] WeatherTemperatureUnit object or a list of WeatherTemperatureUnit objects based on the text parameter to this function. Example A WeatherTemperatureUnit denote the weather attribute \"sunny\" in a user command: Tell me the weather in fahrenheit. weather_temperature_unit = WeatherTemperatureUnit . resolve_from_text ( \"fahrenheit\" )","title":"WeatherTemperatureUnit.resolve_from_text"}]}